/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 42714.0, "series": [{"data": [[0.0, 7.0], [0.1, 13.0], [0.2, 14.0], [0.3, 17.0], [0.4, 19.0], [0.5, 21.0], [0.6, 24.0], [0.7, 25.0], [0.8, 27.0], [0.9, 30.0], [1.0, 33.0], [1.1, 37.0], [1.2, 40.0], [1.3, 46.0], [1.4, 51.0], [1.5, 59.0], [1.6, 64.0], [1.7, 67.0], [1.8, 71.0], [1.9, 73.0], [2.0, 76.0], [2.1, 79.0], [2.2, 81.0], [2.3, 83.0], [2.4, 85.0], [2.5, 87.0], [2.6, 89.0], [2.7, 91.0], [2.8, 92.0], [2.9, 94.0], [3.0, 96.0], [3.1, 97.0], [3.2, 99.0], [3.3, 100.0], [3.4, 101.0], [3.5, 103.0], [3.6, 105.0], [3.7, 106.0], [3.8, 108.0], [3.9, 109.0], [4.0, 110.0], [4.1, 112.0], [4.2, 115.0], [4.3, 117.0], [4.4, 119.0], [4.5, 121.0], [4.6, 123.0], [4.7, 125.0], [4.8, 129.0], [4.9, 131.0], [5.0, 135.0], [5.1, 141.0], [5.2, 147.0], [5.3, 155.0], [5.4, 159.0], [5.5, 163.0], [5.6, 167.0], [5.7, 170.0], [5.8, 173.0], [5.9, 176.0], [6.0, 178.0], [6.1, 181.0], [6.2, 184.0], [6.3, 187.0], [6.4, 189.0], [6.5, 191.0], [6.6, 193.0], [6.7, 195.0], [6.8, 197.0], [6.9, 199.0], [7.0, 201.0], [7.1, 203.0], [7.2, 205.0], [7.3, 207.0], [7.4, 209.0], [7.5, 211.0], [7.6, 213.0], [7.7, 216.0], [7.8, 218.0], [7.9, 219.0], [8.0, 222.0], [8.1, 226.0], [8.2, 229.0], [8.3, 233.0], [8.4, 238.0], [8.5, 242.0], [8.6, 248.0], [8.7, 255.0], [8.8, 261.0], [8.9, 265.0], [9.0, 270.0], [9.1, 273.0], [9.2, 278.0], [9.3, 281.0], [9.4, 284.0], [9.5, 286.0], [9.6, 288.0], [9.7, 291.0], [9.8, 294.0], [9.9, 296.0], [10.0, 298.0], [10.1, 301.0], [10.2, 303.0], [10.3, 305.0], [10.4, 308.0], [10.5, 310.0], [10.6, 313.0], [10.7, 317.0], [10.8, 320.0], [10.9, 324.0], [11.0, 329.0], [11.1, 333.0], [11.2, 339.0], [11.3, 345.0], [11.4, 355.0], [11.5, 361.0], [11.6, 366.0], [11.7, 371.0], [11.8, 374.0], [11.9, 379.0], [12.0, 383.0], [12.1, 386.0], [12.2, 388.0], [12.3, 391.0], [12.4, 394.0], [12.5, 397.0], [12.6, 400.0], [12.7, 402.0], [12.8, 404.0], [12.9, 407.0], [13.0, 410.0], [13.1, 412.0], [13.2, 416.0], [13.3, 419.0], [13.4, 425.0], [13.5, 430.0], [13.6, 435.0], [13.7, 442.0], [13.8, 453.0], [13.9, 462.0], [14.0, 467.0], [14.1, 473.0], [14.2, 478.0], [14.3, 482.0], [14.4, 485.0], [14.5, 489.0], [14.6, 492.0], [14.7, 495.0], [14.8, 497.0], [14.9, 500.0], [15.0, 502.0], [15.1, 505.0], [15.2, 509.0], [15.3, 512.0], [15.4, 516.0], [15.5, 520.0], [15.6, 524.0], [15.7, 531.0], [15.8, 539.0], [15.9, 552.0], [16.0, 561.0], [16.1, 568.0], [16.2, 573.0], [16.3, 578.0], [16.4, 581.0], [16.5, 585.0], [16.6, 589.0], [16.7, 593.0], [16.8, 596.0], [16.9, 599.0], [17.0, 603.0], [17.1, 607.0], [17.2, 612.0], [17.3, 618.0], [17.4, 621.0], [17.5, 627.0], [17.6, 632.0], [17.7, 642.0], [17.8, 658.0], [17.9, 666.0], [18.0, 675.0], [18.1, 678.0], [18.2, 684.0], [18.3, 689.0], [18.4, 692.0], [18.5, 696.0], [18.6, 699.0], [18.7, 703.0], [18.8, 708.0], [18.9, 714.0], [19.0, 718.0], [19.1, 724.0], [19.2, 733.0], [19.3, 747.0], [19.4, 759.0], [19.5, 766.0], [19.6, 775.0], [19.7, 780.0], [19.8, 785.0], [19.9, 792.0], [20.0, 796.0], [20.1, 800.0], [20.2, 806.0], [20.3, 811.0], [20.4, 817.0], [20.5, 824.0], [20.6, 834.0], [20.7, 849.0], [20.8, 867.0], [20.9, 876.0], [21.0, 885.0], [21.1, 891.0], [21.2, 896.0], [21.3, 902.0], [21.4, 907.0], [21.5, 915.0], [21.6, 923.0], [21.7, 934.0], [21.8, 957.0], [21.9, 968.0], [22.0, 980.0], [22.1, 990.0], [22.2, 996.0], [22.3, 1002.0], [22.4, 1009.0], [22.5, 1015.0], [22.6, 1029.0], [22.7, 1045.0], [22.8, 1067.0], [22.9, 1077.0], [23.0, 1090.0], [23.1, 1097.0], [23.2, 1104.0], [23.3, 1113.0], [23.4, 1126.0], [23.5, 1154.0], [23.6, 1178.0], [23.7, 1192.0], [23.8, 1202.0], [23.9, 1210.0], [24.0, 1223.0], [24.1, 1233.0], [24.2, 1261.0], [24.3, 1280.0], [24.4, 1292.0], [24.5, 1303.0], [24.6, 1315.0], [24.7, 1328.0], [24.8, 1357.0], [24.9, 1378.0], [25.0, 1391.0], [25.1, 1401.0], [25.2, 1415.0], [25.3, 1436.0], [25.4, 1465.0], [25.5, 1487.0], [25.6, 1502.0], [25.7, 1514.0], [25.8, 1528.0], [25.9, 1565.0], [26.0, 1587.0], [26.1, 1600.0], [26.2, 1622.0], [26.3, 1659.0], [26.4, 1687.0], [26.5, 1703.0], [26.6, 1721.0], [26.7, 1761.0], [26.8, 1788.0], [26.9, 1809.0], [27.0, 1832.0], [27.1, 1873.0], [27.2, 1899.0], [27.3, 1918.0], [27.4, 1953.0], [27.5, 1984.0], [27.6, 2002.0], [27.7, 2023.0], [27.8, 2062.0], [27.9, 2092.0], [28.0, 2111.0], [28.1, 2141.0], [28.2, 2176.0], [28.3, 2195.0], [28.4, 2229.0], [28.5, 2273.0], [28.6, 2298.0], [28.7, 2322.0], [28.8, 2367.0], [28.9, 2394.0], [29.0, 2419.0], [29.1, 2470.0], [29.2, 2498.0], [29.3, 2559.0], [29.4, 2604.0], [29.5, 2656.0], [29.6, 2701.0], [29.7, 2751.0], [29.8, 2796.0], [29.9, 2841.0], [30.0, 2900.0], [30.1, 2925.0], [30.2, 2983.0], [30.3, 3015.0], [30.4, 3073.0], [30.5, 3103.0], [30.6, 3136.0], [30.7, 3193.0], [30.8, 3232.0], [30.9, 3291.0], [31.0, 3319.0], [31.1, 3380.0], [31.2, 3401.0], [31.3, 3461.0], [31.4, 3503.0], [31.5, 3566.0], [31.6, 3594.0], [31.7, 3626.0], [31.8, 3685.0], [31.9, 3712.0], [32.0, 3764.0], [32.1, 3806.0], [32.2, 3834.0], [32.3, 3890.0], [32.4, 3928.0], [32.5, 3981.0], [32.6, 4001.0], [32.7, 4052.0], [32.8, 4089.0], [32.9, 4114.0], [33.0, 4165.0], [33.1, 4195.0], [33.2, 4216.0], [33.3, 4257.0], [33.4, 4292.0], [33.5, 4324.0], [33.6, 4369.0], [33.7, 4400.0], [33.8, 4426.0], [33.9, 4479.0], [34.0, 4505.0], [34.1, 4536.0], [34.2, 4579.0], [34.3, 4604.0], [34.4, 4631.0], [34.5, 4675.0], [34.6, 4693.0], [34.7, 4718.0], [34.8, 4761.0], [34.9, 4784.0], [35.0, 4802.0], [35.1, 4832.0], [35.2, 4879.0], [35.3, 4903.0], [35.4, 4936.0], [35.5, 4974.0], [35.6, 4992.0], [35.7, 5006.0], [35.8, 5020.0], [35.9, 5038.0], [36.0, 5071.0], [36.1, 5095.0], [36.2, 5109.0], [36.3, 5131.0], [36.4, 5176.0], [36.5, 5195.0], [36.6, 5210.0], [36.7, 5235.0], [36.8, 5270.0], [36.9, 5298.0], [37.0, 5317.0], [37.1, 5367.0], [37.2, 5389.0], [37.3, 5405.0], [37.4, 5429.0], [37.5, 5471.0], [37.6, 5494.0], [37.7, 5510.0], [37.8, 5542.0], [37.9, 5576.0], [38.0, 5593.0], [38.1, 5619.0], [38.2, 5648.0], [38.3, 5677.0], [38.4, 5699.0], [38.5, 5725.0], [38.6, 5772.0], [38.7, 5790.0], [38.8, 5805.0], [38.9, 5828.0], [39.0, 5871.0], [39.1, 5892.0], [39.2, 5908.0], [39.3, 5935.0], [39.4, 5970.0], [39.5, 5994.0], [39.6, 6010.0], [39.7, 6036.0], [39.8, 6076.0], [39.9, 6099.0], [40.0, 6119.0], [40.1, 6157.0], [40.2, 6190.0], [40.3, 6215.0], [40.4, 6247.0], [40.5, 6284.0], [40.6, 6303.0], [40.7, 6322.0], [40.8, 6355.0], [40.9, 6395.0], [41.0, 6413.0], [41.1, 6438.0], [41.2, 6476.0], [41.3, 6499.0], [41.4, 6514.0], [41.5, 6532.0], [41.6, 6571.0], [41.7, 6592.0], [41.8, 6607.0], [41.9, 6630.0], [42.0, 6667.0], [42.1, 6686.0], [42.2, 6702.0], [42.3, 6719.0], [42.4, 6752.0], [42.5, 6776.0], [42.6, 6791.0], [42.7, 6807.0], [42.8, 6828.0], [42.9, 6876.0], [43.0, 6899.0], [43.1, 6918.0], [43.2, 6941.0], [43.3, 6976.0], [43.4, 6998.0], [43.5, 7012.0], [43.6, 7035.0], [43.7, 7071.0], [43.8, 7090.0], [43.9, 7102.0], [44.0, 7116.0], [44.1, 7143.0], [44.2, 7173.0], [44.3, 7190.0], [44.4, 7208.0], [44.5, 7221.0], [44.6, 7247.0], [44.7, 7272.0], [44.8, 7289.0], [44.9, 7300.0], [45.0, 7311.0], [45.1, 7325.0], [45.2, 7349.0], [45.3, 7374.0], [45.4, 7390.0], [45.5, 7403.0], [45.6, 7418.0], [45.7, 7436.0], [45.8, 7464.0], [45.9, 7482.0], [46.0, 7494.0], [46.1, 7507.0], [46.2, 7519.0], [46.3, 7535.0], [46.4, 7567.0], [46.5, 7581.0], [46.6, 7595.0], [46.7, 7609.0], [46.8, 7624.0], [46.9, 7641.0], [47.0, 7668.0], [47.1, 7683.0], [47.2, 7697.0], [47.3, 7711.0], [47.4, 7725.0], [47.5, 7741.0], [47.6, 7765.0], [47.7, 7780.0], [47.8, 7792.0], [47.9, 7804.0], [48.0, 7816.0], [48.1, 7836.0], [48.2, 7868.0], [48.3, 7882.0], [48.4, 7895.0], [48.5, 7906.0], [48.6, 7918.0], [48.7, 7935.0], [48.8, 7960.0], [48.9, 7979.0], [49.0, 7993.0], [49.1, 8003.0], [49.2, 8016.0], [49.3, 8030.0], [49.4, 8057.0], [49.5, 8074.0], [49.6, 8087.0], [49.7, 8096.0], [49.8, 8103.0], [49.9, 8113.0], [50.0, 8127.0], [50.1, 8146.0], [50.2, 8166.0], [50.3, 8183.0], [50.4, 8191.0], [50.5, 8200.0], [50.6, 8214.0], [50.7, 8230.0], [50.8, 8253.0], [50.9, 8274.0], [51.0, 8288.0], [51.1, 8298.0], [51.2, 8304.0], [51.3, 8313.0], [51.4, 8324.0], [51.5, 8336.0], [51.6, 8351.0], [51.7, 8371.0], [51.8, 8383.0], [51.9, 8394.0], [52.0, 8401.0], [52.1, 8409.0], [52.2, 8421.0], [52.3, 8433.0], [52.4, 8455.0], [52.5, 8474.0], [52.6, 8485.0], [52.7, 8495.0], [52.8, 8501.0], [52.9, 8510.0], [53.0, 8517.0], [53.1, 8529.0], [53.2, 8549.0], [53.3, 8567.0], [53.4, 8582.0], [53.5, 8589.0], [53.6, 8597.0], [53.7, 8604.0], [53.8, 8615.0], [53.9, 8627.0], [54.0, 8642.0], [54.1, 8664.0], [54.2, 8679.0], [54.3, 8689.0], [54.4, 8696.0], [54.5, 8703.0], [54.6, 8711.0], [54.7, 8721.0], [54.8, 8734.0], [54.9, 8751.0], [55.0, 8771.0], [55.1, 8784.0], [55.2, 8792.0], [55.3, 8801.0], [55.4, 8811.0], [55.5, 8822.0], [55.6, 8834.0], [55.7, 8855.0], [55.8, 8874.0], [55.9, 8882.0], [56.0, 8891.0], [56.1, 8898.0], [56.2, 8904.0], [56.3, 8913.0], [56.4, 8925.0], [56.5, 8941.0], [56.6, 8960.0], [56.7, 8974.0], [56.8, 8983.0], [56.9, 8991.0], [57.0, 9001.0], [57.1, 9008.0], [57.2, 9016.0], [57.3, 9027.0], [57.4, 9048.0], [57.5, 9066.0], [57.6, 9077.0], [57.7, 9089.0], [57.8, 9095.0], [57.9, 9103.0], [58.0, 9114.0], [58.1, 9125.0], [58.2, 9143.0], [58.3, 9164.0], [58.4, 9177.0], [58.5, 9189.0], [58.6, 9199.0], [58.7, 9206.0], [58.8, 9215.0], [58.9, 9223.0], [59.0, 9236.0], [59.1, 9259.0], [59.2, 9274.0], [59.3, 9284.0], [59.4, 9292.0], [59.5, 9300.0], [59.6, 9307.0], [59.7, 9319.0], [59.8, 9331.0], [59.9, 9347.0], [60.0, 9373.0], [60.1, 9381.0], [60.2, 9392.0], [60.3, 9399.0], [60.4, 9407.0], [60.5, 9415.0], [60.6, 9426.0], [60.7, 9441.0], [60.8, 9459.0], [60.9, 9474.0], [61.0, 9485.0], [61.1, 9494.0], [61.2, 9503.0], [61.3, 9514.0], [61.4, 9524.0], [61.5, 9537.0], [61.6, 9563.0], [61.7, 9577.0], [61.8, 9587.0], [61.9, 9596.0], [62.0, 9603.0], [62.1, 9608.0], [62.2, 9619.0], [62.3, 9636.0], [62.4, 9658.0], [62.5, 9676.0], [62.6, 9686.0], [62.7, 9695.0], [62.8, 9702.0], [62.9, 9709.0], [63.0, 9717.0], [63.1, 9731.0], [63.2, 9748.0], [63.3, 9767.0], [63.4, 9782.0], [63.5, 9791.0], [63.6, 9798.0], [63.7, 9808.0], [63.8, 9817.0], [63.9, 9830.0], [64.0, 9861.0], [64.1, 9875.0], [64.2, 9884.0], [64.3, 9892.0], [64.4, 9900.0], [64.5, 9908.0], [64.6, 9917.0], [64.7, 9929.0], [64.8, 9950.0], [64.9, 9966.0], [65.0, 9978.0], [65.1, 9991.0], [65.2, 10000.0], [65.3, 10006.0], [65.4, 10020.0], [65.5, 10036.0], [65.6, 10053.0], [65.7, 10077.0], [65.8, 10085.0], [65.9, 10094.0], [66.0, 10102.0], [66.1, 10112.0], [66.2, 10124.0], [66.3, 10142.0], [66.4, 10165.0], [66.5, 10183.0], [66.6, 10194.0], [66.7, 10205.0], [66.8, 10216.0], [66.9, 10234.0], [67.0, 10255.0], [67.1, 10275.0], [67.2, 10283.0], [67.3, 10294.0], [67.4, 10306.0], [67.5, 10316.0], [67.6, 10326.0], [67.7, 10355.0], [67.8, 10376.0], [67.9, 10391.0], [68.0, 10403.0], [68.1, 10414.0], [68.2, 10429.0], [68.3, 10460.0], [68.4, 10480.0], [68.5, 10491.0], [68.6, 10500.0], [68.7, 10511.0], [68.8, 10526.0], [68.9, 10557.0], [69.0, 10575.0], [69.1, 10590.0], [69.2, 10599.0], [69.3, 10609.0], [69.4, 10624.0], [69.5, 10641.0], [69.6, 10670.0], [69.7, 10685.0], [69.8, 10696.0], [69.9, 10708.0], [70.0, 10729.0], [70.1, 10768.0], [70.2, 10782.0], [70.3, 10793.0], [70.4, 10801.0], [70.5, 10812.0], [70.6, 10827.0], [70.7, 10856.0], [70.8, 10877.0], [70.9, 10894.0], [71.0, 10906.0], [71.1, 10921.0], [71.2, 10938.0], [71.3, 10976.0], [71.4, 10994.0], [71.5, 11003.0], [71.6, 11014.0], [71.7, 11042.0], [71.8, 11074.0], [71.9, 11092.0], [72.0, 11103.0], [72.1, 11118.0], [72.2, 11153.0], [72.3, 11183.0], [72.4, 11196.0], [72.5, 11213.0], [72.6, 11230.0], [72.7, 11263.0], [72.8, 11284.0], [72.9, 11297.0], [73.0, 11311.0], [73.1, 11326.0], [73.2, 11361.0], [73.3, 11384.0], [73.4, 11397.0], [73.5, 11408.0], [73.6, 11424.0], [73.7, 11448.0], [73.8, 11474.0], [73.9, 11491.0], [74.0, 11504.0], [74.1, 11519.0], [74.2, 11534.0], [74.3, 11566.0], [74.4, 11587.0], [74.5, 11602.0], [74.6, 11615.0], [74.7, 11638.0], [74.8, 11671.0], [74.9, 11688.0], [75.0, 11704.0], [75.1, 11717.0], [75.2, 11741.0], [75.3, 11776.0], [75.4, 11792.0], [75.5, 11809.0], [75.6, 11833.0], [75.7, 11874.0], [75.8, 11893.0], [75.9, 11908.0], [76.0, 11925.0], [76.1, 11966.0], [76.2, 11981.0], [76.3, 12000.0], [76.4, 12010.0], [76.5, 12031.0], [76.6, 12068.0], [76.7, 12091.0], [76.8, 12105.0], [76.9, 12117.0], [77.0, 12132.0], [77.1, 12158.0], [77.2, 12180.0], [77.3, 12194.0], [77.4, 12207.0], [77.5, 12219.0], [77.6, 12237.0], [77.7, 12266.0], [77.8, 12284.0], [77.9, 12295.0], [78.0, 12305.0], [78.1, 12313.0], [78.2, 12325.0], [78.3, 12352.0], [78.4, 12375.0], [78.5, 12388.0], [78.6, 12399.0], [78.7, 12411.0], [78.8, 12423.0], [78.9, 12452.0], [79.0, 12476.0], [79.1, 12489.0], [79.2, 12497.0], [79.3, 12505.0], [79.4, 12517.0], [79.5, 12531.0], [79.6, 12550.0], [79.7, 12575.0], [79.8, 12589.0], [79.9, 12596.0], [80.0, 12606.0], [80.1, 12616.0], [80.2, 12631.0], [80.3, 12656.0], [80.4, 12674.0], [80.5, 12688.0], [80.6, 12697.0], [80.7, 12705.0], [80.8, 12714.0], [80.9, 12725.0], [81.0, 12745.0], [81.1, 12769.0], [81.2, 12784.0], [81.3, 12794.0], [81.4, 12801.0], [81.5, 12811.0], [81.6, 12823.0], [81.7, 12844.0], [81.8, 12868.0], [81.9, 12882.0], [82.0, 12890.0], [82.1, 12901.0], [82.2, 12908.0], [82.3, 12919.0], [82.4, 12931.0], [82.5, 12949.0], [82.6, 12965.0], [82.7, 12978.0], [82.8, 12990.0], [82.9, 12998.0], [83.0, 13005.0], [83.1, 13014.0], [83.2, 13022.0], [83.3, 13032.0], [83.4, 13046.0], [83.5, 13069.0], [83.6, 13083.0], [83.7, 13092.0], [83.8, 13100.0], [83.9, 13107.0], [84.0, 13118.0], [84.1, 13134.0], [84.2, 13161.0], [84.3, 13176.0], [84.4, 13187.0], [84.5, 13197.0], [84.6, 13204.0], [84.7, 13216.0], [84.8, 13234.0], [84.9, 13256.0], [85.0, 13275.0], [85.1, 13287.0], [85.2, 13298.0], [85.3, 13306.0], [85.4, 13318.0], [85.5, 13334.0], [85.6, 13364.0], [85.7, 13381.0], [85.8, 13394.0], [85.9, 13402.0], [86.0, 13417.0], [86.1, 13427.0], [86.2, 13445.0], [86.3, 13470.0], [86.4, 13485.0], [86.5, 13495.0], [86.6, 13508.0], [86.7, 13521.0], [86.8, 13538.0], [86.9, 13567.0], [87.0, 13587.0], [87.1, 13597.0], [87.2, 13609.0], [87.3, 13623.0], [87.4, 13641.0], [87.5, 13666.0], [87.6, 13683.0], [87.7, 13696.0], [87.8, 13704.0], [87.9, 13714.0], [88.0, 13733.0], [88.1, 13764.0], [88.2, 13783.0], [88.3, 13797.0], [88.4, 13809.0], [88.5, 13824.0], [88.6, 13843.0], [88.7, 13873.0], [88.8, 13893.0], [88.9, 13906.0], [89.0, 13921.0], [89.1, 13949.0], [89.2, 13981.0], [89.3, 13998.0], [89.4, 14011.0], [89.5, 14031.0], [89.6, 14065.0], [89.7, 14083.0], [89.8, 14095.0], [89.9, 14109.0], [90.0, 14123.0], [90.1, 14164.0], [90.2, 14188.0], [90.3, 14201.0], [90.4, 14216.0], [90.5, 14250.0], [90.6, 14276.0], [90.7, 14296.0], [90.8, 14307.0], [90.9, 14323.0], [91.0, 14353.0], [91.1, 14380.0], [91.2, 14397.0], [91.3, 14418.0], [91.4, 14445.0], [91.5, 14477.0], [91.6, 14501.0], [91.7, 14529.0], [91.8, 14573.0], [91.9, 14593.0], [92.0, 14610.0], [92.1, 14661.0], [92.2, 14688.0], [92.3, 14711.0], [92.4, 14743.0], [92.5, 14786.0], [92.6, 14804.0], [92.7, 14828.0], [92.8, 14870.0], [92.9, 14893.0], [93.0, 14910.0], [93.1, 14951.0], [93.2, 14979.0], [93.3, 15002.0], [93.4, 15026.0], [93.5, 15063.0], [93.6, 15099.0], [93.7, 15119.0], [93.8, 15174.0], [93.9, 15203.0], [94.0, 15238.0], [94.1, 15288.0], [94.2, 15305.0], [94.3, 15351.0], [94.4, 15391.0], [94.5, 15419.0], [94.6, 15482.0], [94.7, 15510.0], [94.8, 15567.0], [94.9, 15601.0], [95.0, 15639.0], [95.1, 15694.0], [95.2, 15732.0], [95.3, 15791.0], [95.4, 15846.0], [95.5, 15899.0], [95.6, 15936.0], [95.7, 16007.0], [95.8, 16073.0], [95.9, 16111.0], [96.0, 16202.0], [96.1, 16283.0], [96.2, 16361.0], [96.3, 16442.0], [96.4, 16522.0], [96.5, 16639.0], [96.6, 16757.0], [96.7, 16832.0], [96.8, 16941.0], [96.9, 17106.0], [97.0, 17210.0], [97.1, 17382.0], [97.2, 17519.0], [97.3, 17681.0], [97.4, 17819.0], [97.5, 18068.0], [97.6, 18273.0], [97.7, 18504.0], [97.8, 18721.0], [97.9, 18928.0], [98.0, 19161.0], [98.1, 19386.0], [98.2, 19638.0], [98.3, 19910.0], [98.4, 20136.0], [98.5, 20397.0], [98.6, 20671.0], [98.7, 21018.0], [98.8, 21372.0], [98.9, 21698.0], [99.0, 22148.0], [99.1, 22530.0], [99.2, 22908.0], [99.3, 23616.0], [99.4, 24205.0], [99.5, 24836.0], [99.6, 25441.0], [99.7, 26221.0], [99.8, 27303.0], [99.9, 28644.0], [100.0, 42714.0]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 7.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 11.0], [4.8, 11.0], [4.9, 11.0], [5.0, 11.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 13.0], [5.6, 13.0], [5.7, 13.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 15.0], [6.3, 15.0], [6.4, 15.0], [6.5, 16.0], [6.6, 16.0], [6.7, 16.0], [6.8, 17.0], [6.9, 17.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 19.0], [7.4, 19.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 21.0], [7.9, 21.0], [8.0, 22.0], [8.1, 23.0], [8.2, 23.0], [8.3, 24.0], [8.4, 24.0], [8.5, 25.0], [8.6, 25.0], [8.7, 26.0], [8.8, 27.0], [8.9, 27.0], [9.0, 28.0], [9.1, 29.0], [9.2, 30.0], [9.3, 30.0], [9.4, 31.0], [9.5, 32.0], [9.6, 33.0], [9.7, 34.0], [9.8, 35.0], [9.9, 36.0], [10.0, 37.0], [10.1, 38.0], [10.2, 39.0], [10.3, 41.0], [10.4, 42.0], [10.5, 44.0], [10.6, 45.0], [10.7, 47.0], [10.8, 49.0], [10.9, 50.0], [11.0, 51.0], [11.1, 52.0], [11.2, 54.0], [11.3, 55.0], [11.4, 56.0], [11.5, 57.0], [11.6, 58.0], [11.7, 58.0], [11.8, 59.0], [11.9, 60.0], [12.0, 61.0], [12.1, 62.0], [12.2, 63.0], [12.3, 63.0], [12.4, 64.0], [12.5, 65.0], [12.6, 66.0], [12.7, 66.0], [12.8, 67.0], [12.9, 68.0], [13.0, 68.0], [13.1, 69.0], [13.2, 70.0], [13.3, 71.0], [13.4, 71.0], [13.5, 72.0], [13.6, 73.0], [13.7, 74.0], [13.8, 74.0], [13.9, 75.0], [14.0, 76.0], [14.1, 76.0], [14.2, 77.0], [14.3, 78.0], [14.4, 78.0], [14.5, 79.0], [14.6, 80.0], [14.7, 80.0], [14.8, 81.0], [14.9, 82.0], [15.0, 82.0], [15.1, 83.0], [15.2, 84.0], [15.3, 84.0], [15.4, 85.0], [15.5, 85.0], [15.6, 86.0], [15.7, 87.0], [15.8, 87.0], [15.9, 88.0], [16.0, 89.0], [16.1, 89.0], [16.2, 90.0], [16.3, 90.0], [16.4, 91.0], [16.5, 92.0], [16.6, 92.0], [16.7, 93.0], [16.8, 93.0], [16.9, 94.0], [17.0, 95.0], [17.1, 95.0], [17.2, 96.0], [17.3, 96.0], [17.4, 97.0], [17.5, 97.0], [17.6, 98.0], [17.7, 98.0], [17.8, 99.0], [17.9, 100.0], [18.0, 100.0], [18.1, 101.0], [18.2, 101.0], [18.3, 102.0], [18.4, 103.0], [18.5, 103.0], [18.6, 104.0], [18.7, 105.0], [18.8, 105.0], [18.9, 106.0], [19.0, 107.0], [19.1, 107.0], [19.2, 108.0], [19.3, 109.0], [19.4, 109.0], [19.5, 110.0], [19.6, 111.0], [19.7, 112.0], [19.8, 113.0], [19.9, 114.0], [20.0, 114.0], [20.1, 115.0], [20.2, 116.0], [20.3, 117.0], [20.4, 118.0], [20.5, 119.0], [20.6, 120.0], [20.7, 121.0], [20.8, 122.0], [20.9, 123.0], [21.0, 125.0], [21.1, 126.0], [21.2, 127.0], [21.3, 128.0], [21.4, 130.0], [21.5, 131.0], [21.6, 133.0], [21.7, 135.0], [21.8, 137.0], [21.9, 139.0], [22.0, 141.0], [22.1, 144.0], [22.2, 146.0], [22.3, 149.0], [22.4, 153.0], [22.5, 156.0], [22.6, 158.0], [22.7, 161.0], [22.8, 162.0], [22.9, 164.0], [23.0, 166.0], [23.1, 167.0], [23.2, 169.0], [23.3, 170.0], [23.4, 172.0], [23.5, 173.0], [23.6, 174.0], [23.7, 176.0], [23.8, 177.0], [23.9, 178.0], [24.0, 180.0], [24.1, 181.0], [24.2, 182.0], [24.3, 183.0], [24.4, 184.0], [24.5, 185.0], [24.6, 186.0], [24.7, 187.0], [24.8, 188.0], [24.9, 189.0], [25.0, 190.0], [25.1, 191.0], [25.2, 192.0], [25.3, 193.0], [25.4, 194.0], [25.5, 195.0], [25.6, 196.0], [25.7, 196.0], [25.8, 197.0], [25.9, 198.0], [26.0, 199.0], [26.1, 200.0], [26.2, 201.0], [26.3, 202.0], [26.4, 202.0], [26.5, 203.0], [26.6, 204.0], [26.7, 205.0], [26.8, 206.0], [26.9, 207.0], [27.0, 208.0], [27.1, 209.0], [27.2, 210.0], [27.3, 211.0], [27.4, 212.0], [27.5, 214.0], [27.6, 215.0], [27.7, 216.0], [27.8, 217.0], [27.9, 219.0], [28.0, 220.0], [28.1, 221.0], [28.2, 223.0], [28.3, 225.0], [28.4, 226.0], [28.5, 228.0], [28.6, 230.0], [28.7, 231.0], [28.8, 234.0], [28.9, 236.0], [29.0, 239.0], [29.1, 242.0], [29.2, 245.0], [29.3, 249.0], [29.4, 253.0], [29.5, 257.0], [29.6, 260.0], [29.7, 262.0], [29.8, 265.0], [29.9, 267.0], [30.0, 269.0], [30.1, 271.0], [30.2, 272.0], [30.3, 274.0], [30.4, 276.0], [30.5, 278.0], [30.6, 279.0], [30.7, 281.0], [30.8, 282.0], [30.9, 284.0], [31.0, 285.0], [31.1, 286.0], [31.2, 288.0], [31.3, 289.0], [31.4, 290.0], [31.5, 291.0], [31.6, 292.0], [31.7, 294.0], [31.8, 295.0], [31.9, 296.0], [32.0, 297.0], [32.1, 298.0], [32.2, 299.0], [32.3, 300.0], [32.4, 302.0], [32.5, 303.0], [32.6, 304.0], [32.7, 305.0], [32.8, 306.0], [32.9, 307.0], [33.0, 309.0], [33.1, 310.0], [33.2, 311.0], [33.3, 312.0], [33.4, 314.0], [33.5, 315.0], [33.6, 317.0], [33.7, 319.0], [33.8, 320.0], [33.9, 322.0], [34.0, 324.0], [34.1, 327.0], [34.2, 329.0], [34.3, 331.0], [34.4, 334.0], [34.5, 337.0], [34.6, 340.0], [34.7, 344.0], [34.8, 349.0], [34.9, 353.0], [35.0, 358.0], [35.1, 361.0], [35.2, 364.0], [35.3, 367.0], [35.4, 369.0], [35.5, 372.0], [35.6, 374.0], [35.7, 376.0], [35.8, 378.0], [35.9, 380.0], [36.0, 381.0], [36.1, 383.0], [36.2, 385.0], [36.3, 386.0], [36.4, 387.0], [36.5, 389.0], [36.6, 390.0], [36.7, 392.0], [36.8, 393.0], [36.9, 394.0], [37.0, 396.0], [37.1, 397.0], [37.2, 398.0], [37.3, 399.0], [37.4, 400.0], [37.5, 402.0], [37.6, 403.0], [37.7, 404.0], [37.8, 405.0], [37.9, 407.0], [38.0, 408.0], [38.1, 410.0], [38.2, 412.0], [38.3, 413.0], [38.4, 415.0], [38.5, 417.0], [38.6, 418.0], [38.7, 421.0], [38.8, 423.0], [38.9, 425.0], [39.0, 428.0], [39.1, 431.0], [39.2, 433.0], [39.3, 436.0], [39.4, 440.0], [39.5, 444.0], [39.6, 449.0], [39.7, 454.0], [39.8, 459.0], [39.9, 462.0], [40.0, 466.0], [40.1, 469.0], [40.2, 472.0], [40.3, 474.0], [40.4, 477.0], [40.5, 479.0], [40.6, 481.0], [40.7, 483.0], [40.8, 484.0], [40.9, 486.0], [41.0, 488.0], [41.1, 489.0], [41.2, 491.0], [41.3, 492.0], [41.4, 494.0], [41.5, 495.0], [41.6, 497.0], [41.7, 498.0], [41.8, 499.0], [41.9, 501.0], [42.0, 502.0], [42.1, 504.0], [42.2, 505.0], [42.3, 507.0], [42.4, 508.0], [42.5, 510.0], [42.6, 511.0], [42.7, 513.0], [42.8, 515.0], [42.9, 517.0], [43.0, 519.0], [43.1, 521.0], [43.2, 523.0], [43.3, 525.0], [43.4, 528.0], [43.5, 531.0], [43.6, 534.0], [43.7, 538.0], [43.8, 541.0], [43.9, 547.0], [44.0, 551.0], [44.1, 556.0], [44.2, 561.0], [44.3, 565.0], [44.4, 568.0], [44.5, 570.0], [44.6, 573.0], [44.7, 575.0], [44.8, 578.0], [44.9, 580.0], [45.0, 582.0], [45.1, 584.0], [45.2, 586.0], [45.3, 588.0], [45.4, 589.0], [45.5, 591.0], [45.6, 593.0], [45.7, 595.0], [45.8, 596.0], [45.9, 598.0], [46.0, 599.0], [46.1, 601.0], [46.2, 603.0], [46.3, 604.0], [46.4, 606.0], [46.5, 607.0], [46.6, 609.0], [46.7, 611.0], [46.8, 613.0], [46.9, 615.0], [47.0, 617.0], [47.1, 619.0], [47.2, 621.0], [47.3, 624.0], [47.4, 626.0], [47.5, 629.0], [47.6, 633.0], [47.7, 636.0], [47.8, 641.0], [47.9, 646.0], [48.0, 652.0], [48.1, 657.0], [48.2, 662.0], [48.3, 666.0], [48.4, 669.0], [48.5, 672.0], [48.6, 675.0], [48.7, 677.0], [48.8, 679.0], [48.9, 682.0], [49.0, 684.0], [49.1, 686.0], [49.2, 688.0], [49.3, 690.0], [49.4, 692.0], [49.5, 694.0], [49.6, 695.0], [49.7, 697.0], [49.8, 699.0], [49.9, 700.0], [50.0, 702.0], [50.1, 704.0], [50.2, 706.0], [50.3, 707.0], [50.4, 709.0], [50.5, 711.0], [50.6, 713.0], [50.7, 715.0], [50.8, 718.0], [50.9, 720.0], [51.0, 723.0], [51.1, 726.0], [51.2, 729.0], [51.3, 732.0], [51.4, 736.0], [51.5, 741.0], [51.6, 746.0], [51.7, 752.0], [51.8, 758.0], [51.9, 763.0], [52.0, 767.0], [52.1, 770.0], [52.2, 773.0], [52.3, 776.0], [52.4, 779.0], [52.5, 781.0], [52.6, 784.0], [52.7, 786.0], [52.8, 788.0], [52.9, 791.0], [53.0, 793.0], [53.1, 795.0], [53.2, 797.0], [53.3, 799.0], [53.4, 801.0], [53.5, 802.0], [53.6, 804.0], [53.7, 806.0], [53.8, 808.0], [53.9, 810.0], [54.0, 813.0], [54.1, 815.0], [54.2, 818.0], [54.3, 820.0], [54.4, 823.0], [54.5, 826.0], [54.6, 830.0], [54.7, 834.0], [54.8, 838.0], [54.9, 844.0], [55.0, 852.0], [55.1, 859.0], [55.2, 864.0], [55.3, 868.0], [55.4, 872.0], [55.5, 875.0], [55.6, 878.0], [55.7, 881.0], [55.8, 884.0], [55.9, 886.0], [56.0, 888.0], [56.1, 891.0], [56.2, 893.0], [56.3, 895.0], [56.4, 897.0], [56.5, 899.0], [56.6, 900.0], [56.7, 902.0], [56.8, 904.0], [56.9, 906.0], [57.0, 908.0], [57.1, 910.0], [57.2, 912.0], [57.3, 915.0], [57.4, 917.0], [57.5, 920.0], [57.6, 923.0], [57.7, 925.0], [57.8, 929.0], [57.9, 932.0], [58.0, 936.0], [58.1, 940.0], [58.2, 947.0], [58.3, 954.0], [58.4, 960.0], [58.5, 965.0], [58.6, 969.0], [58.7, 972.0], [58.8, 975.0], [58.9, 978.0], [59.0, 981.0], [59.1, 984.0], [59.2, 986.0], [59.3, 988.0], [59.4, 990.0], [59.5, 993.0], [59.6, 994.0], [59.7, 996.0], [59.8, 998.0], [59.9, 1000.0], [60.0, 1002.0], [60.1, 1004.0], [60.2, 1007.0], [60.3, 1009.0], [60.4, 1012.0], [60.5, 1014.0], [60.6, 1017.0], [60.7, 1019.0], [60.8, 1022.0], [60.9, 1025.0], [61.0, 1029.0], [61.1, 1033.0], [61.2, 1038.0], [61.3, 1045.0], [61.4, 1053.0], [61.5, 1060.0], [61.6, 1065.0], [61.7, 1069.0], [61.8, 1073.0], [61.9, 1077.0], [62.0, 1079.0], [62.1, 1082.0], [62.2, 1085.0], [62.3, 1087.0], [62.4, 1090.0], [62.5, 1092.0], [62.6, 1094.0], [62.7, 1097.0], [62.8, 1099.0], [62.9, 1101.0], [63.0, 1103.0], [63.1, 1105.0], [63.2, 1107.0], [63.3, 1110.0], [63.4, 1112.0], [63.5, 1115.0], [63.6, 1118.0], [63.7, 1121.0], [63.8, 1124.0], [63.9, 1128.0], [64.0, 1133.0], [64.1, 1138.0], [64.2, 1145.0], [64.3, 1154.0], [64.4, 1161.0], [64.5, 1166.0], [64.6, 1171.0], [64.7, 1175.0], [64.8, 1179.0], [64.9, 1182.0], [65.0, 1185.0], [65.1, 1188.0], [65.2, 1191.0], [65.3, 1194.0], [65.4, 1196.0], [65.5, 1199.0], [65.6, 1201.0], [65.7, 1203.0], [65.8, 1206.0], [65.9, 1208.0], [66.0, 1211.0], [66.1, 1214.0], [66.2, 1217.0], [66.3, 1221.0], [66.4, 1225.0], [66.5, 1230.0], [66.6, 1236.0], [66.7, 1243.0], [66.8, 1253.0], [66.9, 1262.0], [67.0, 1269.0], [67.1, 1274.0], [67.2, 1278.0], [67.3, 1282.0], [67.4, 1286.0], [67.5, 1289.0], [67.6, 1292.0], [67.7, 1295.0], [67.8, 1298.0], [67.9, 1300.0], [68.0, 1303.0], [68.1, 1306.0], [68.2, 1309.0], [68.3, 1312.0], [68.4, 1316.0], [68.5, 1320.0], [68.6, 1324.0], [68.7, 1329.0], [68.8, 1335.0], [68.9, 1342.0], [69.0, 1351.0], [69.1, 1360.0], [69.2, 1367.0], [69.3, 1373.0], [69.4, 1377.0], [69.5, 1381.0], [69.6, 1385.0], [69.7, 1388.0], [69.8, 1392.0], [69.9, 1395.0], [70.0, 1398.0], [70.1, 1401.0], [70.2, 1404.0], [70.3, 1407.0], [70.4, 1410.0], [70.5, 1414.0], [70.6, 1418.0], [70.7, 1422.0], [70.8, 1428.0], [70.9, 1434.0], [71.0, 1442.0], [71.1, 1454.0], [71.2, 1464.0], [71.3, 1470.0], [71.4, 1476.0], [71.5, 1481.0], [71.6, 1485.0], [71.7, 1490.0], [71.8, 1494.0], [71.9, 1497.0], [72.0, 1500.0], [72.1, 1504.0], [72.2, 1507.0], [72.3, 1510.0], [72.4, 1514.0], [72.5, 1519.0], [72.6, 1524.0], [72.7, 1530.0], [72.8, 1536.0], [72.9, 1545.0], [73.0, 1559.0], [73.1, 1567.0], [73.2, 1574.0], [73.3, 1580.0], [73.4, 1584.0], [73.5, 1589.0], [73.6, 1592.0], [73.7, 1596.0], [73.8, 1600.0], [73.9, 1603.0], [74.0, 1607.0], [74.1, 1611.0], [74.2, 1616.0], [74.3, 1621.0], [74.4, 1628.0], [74.5, 1636.0], [74.6, 1649.0], [74.7, 1663.0], [74.8, 1671.0], [74.9, 1678.0], [75.0, 1684.0], [75.1, 1689.0], [75.2, 1694.0], [75.3, 1699.0], [75.4, 1702.0], [75.5, 1707.0], [75.6, 1712.0], [75.7, 1717.0], [75.8, 1724.0], [75.9, 1732.0], [76.0, 1742.0], [76.1, 1758.0], [76.2, 1769.0], [76.3, 1776.0], [76.4, 1783.0], [76.5, 1789.0], [76.6, 1794.0], [76.7, 1798.0], [76.8, 1803.0], [76.9, 1808.0], [77.0, 1813.0], [77.1, 1818.0], [77.2, 1825.0], [77.3, 1834.0], [77.4, 1846.0], [77.5, 1862.0], [77.6, 1871.0], [77.7, 1879.0], [77.8, 1886.0], [77.9, 1891.0], [78.0, 1897.0], [78.1, 1901.0], [78.2, 1906.0], [78.3, 1912.0], [78.4, 1919.0], [78.5, 1927.0], [78.6, 1937.0], [78.7, 1953.0], [78.8, 1967.0], [78.9, 1976.0], [79.0, 1983.0], [79.1, 1990.0], [79.2, 1995.0], [79.3, 2001.0], [79.4, 2006.0], [79.5, 2012.0], [79.6, 2020.0], [79.7, 2029.0], [79.8, 2041.0], [79.9, 2061.0], [80.0, 2074.0], [80.1, 2082.0], [80.2, 2089.0], [80.3, 2095.0], [80.4, 2101.0], [80.5, 2107.0], [80.6, 2115.0], [80.7, 2122.0], [80.8, 2133.0], [80.9, 2150.0], [81.0, 2169.0], [81.1, 2180.0], [81.2, 2188.0], [81.3, 2196.0], [81.4, 2203.0], [81.5, 2209.0], [81.6, 2216.0], [81.7, 2225.0], [81.8, 2237.0], [81.9, 2259.0], [82.0, 2273.0], [82.1, 2283.0], [82.2, 2291.0], [82.3, 2297.0], [82.4, 2303.0], [82.5, 2312.0], [82.6, 2321.0], [82.7, 2331.0], [82.8, 2352.0], [82.9, 2369.0], [83.0, 2379.0], [83.1, 2388.0], [83.2, 2395.0], [83.3, 2402.0], [83.4, 2409.0], [83.5, 2418.0], [83.6, 2431.0], [83.7, 2452.0], [83.8, 2470.0], [83.9, 2481.0], [84.0, 2489.0], [84.1, 2496.0], [84.2, 2503.0], [84.3, 2510.0], [84.4, 2519.0], [84.5, 2530.0], [84.6, 2557.0], [84.7, 2574.0], [84.8, 2584.0], [84.9, 2593.0], [85.0, 2601.0], [85.1, 2610.0], [85.2, 2620.0], [85.3, 2631.0], [85.4, 2654.0], [85.5, 2674.0], [85.6, 2685.0], [85.7, 2694.0], [85.8, 2702.0], [85.9, 2711.0], [86.0, 2720.0], [86.1, 2733.0], [86.2, 2757.0], [86.3, 2774.0], [86.4, 2785.0], [86.5, 2794.0], [86.6, 2802.0], [86.7, 2813.0], [86.8, 2826.0], [86.9, 2849.0], [87.0, 2873.0], [87.1, 2887.0], [87.2, 2897.0], [87.3, 2906.0], [87.4, 2917.0], [87.5, 2932.0], [87.6, 2962.0], [87.7, 2978.0], [87.8, 2989.0], [87.9, 3000.0], [88.0, 3010.0], [88.1, 3029.0], [88.2, 3066.0], [88.3, 3087.0], [88.4, 3099.0], [88.5, 3113.0], [88.6, 3134.0], [88.7, 3172.0], [88.8, 3193.0], [88.9, 3209.0], [89.0, 3229.0], [89.1, 3272.0], [89.2, 3293.0], [89.3, 3311.0], [89.4, 3338.0], [89.5, 3379.0], [89.6, 3400.0], [89.7, 3426.0], [89.8, 3479.0], [89.9, 3503.0], [90.0, 3546.0], [90.1, 3591.0], [90.2, 3630.0], [90.3, 3688.0], [90.4, 3716.0], [90.5, 3774.0], [90.6, 3802.0], [90.7, 3839.0], [90.8, 3886.0], [90.9, 3914.0], [91.0, 3963.0], [91.1, 3997.0], [91.2, 4024.0], [91.3, 4074.0], [91.4, 4099.0], [91.5, 4122.0], [91.6, 4171.0], [91.7, 4195.0], [91.8, 4223.0], [91.9, 4273.0], [92.0, 4297.0], [92.1, 4317.0], [92.2, 4355.0], [92.3, 4384.0], [92.4, 4401.0], [92.5, 4421.0], [92.6, 4456.0], [92.7, 4480.0], [92.8, 4497.0], [92.9, 4514.0], [93.0, 4538.0], [93.1, 4576.0], [93.2, 4591.0], [93.3, 4604.0], [93.4, 4620.0], [93.5, 4645.0], [93.6, 4673.0], [93.7, 4690.0], [93.8, 4703.0], [93.9, 4717.0], [94.0, 4739.0], [94.1, 4771.0], [94.2, 4789.0], [94.3, 4802.0], [94.4, 4819.0], [94.5, 4845.0], [94.6, 4878.0], [94.7, 4896.0], [94.8, 4910.0], [94.9, 4936.0], [95.0, 4974.0], [95.1, 4995.0], [95.2, 5007.0], [95.3, 5025.0], [95.4, 5069.0], [95.5, 5093.0], [95.6, 5108.0], [95.7, 5133.0], [95.8, 5177.0], [95.9, 5200.0], [96.0, 5225.0], [96.1, 5273.0], [96.2, 5299.0], [96.3, 5338.0], [96.4, 5384.0], [96.5, 5410.0], [96.6, 5465.0], [96.7, 5500.0], [96.8, 5535.0], [96.9, 5587.0], [97.0, 5626.0], [97.1, 5685.0], [97.2, 5733.0], [97.3, 5801.0], [97.4, 5881.0], [97.5, 5937.0], [97.6, 6032.0], [97.7, 6123.0], [97.8, 6241.0], [97.9, 6384.0], [98.0, 6584.0], [98.1, 6795.0], [98.2, 6972.0], [98.3, 7211.0], [98.4, 7479.0], [98.5, 7807.0], [98.6, 8185.0], [98.7, 8432.0], [98.8, 8698.0], [98.9, 8936.0], [99.0, 9142.0], [99.1, 9420.0], [99.2, 9725.0], [99.3, 10014.0], [99.4, 10394.0], [99.5, 10906.0], [99.6, 11798.0], [99.7, 12824.0], [99.8, 14192.0], [99.9, 15985.0], [100.0, 34681.0]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 36110.0, "series": [{"data": [[0.0, 1172.0], [100.0, 1330.0], [200.0, 1122.0], [300.0, 925.0], [400.0, 829.0], [500.0, 726.0], [600.0, 615.0], [700.0, 536.0], [800.0, 421.0], [900.0, 355.0], [1000.0, 317.0], [1100.0, 239.0], [1200.0, 247.0], [1300.0, 220.0], [1400.0, 180.0], [1500.0, 188.0], [1600.0, 141.0], [1700.0, 130.0], [1800.0, 129.0], [1900.0, 136.0], [2000.0, 128.0], [2100.0, 135.0], [2300.0, 117.0], [2200.0, 107.0], [2400.0, 102.0], [2500.0, 64.0], [2600.0, 73.0], [2700.0, 79.0], [2800.0, 68.0], [2900.0, 87.0], [3000.0, 93.0], [3100.0, 81.0], [3300.0, 94.0], [3200.0, 76.0], [3400.0, 73.0], [3500.0, 82.0], [3600.0, 86.0], [3700.0, 84.0], [3800.0, 88.0], [3900.0, 90.0], [4000.0, 94.0], [4100.0, 97.0], [4200.0, 112.0], [4300.0, 99.0], [4400.0, 103.0], [4600.0, 127.0], [4500.0, 107.0], [4700.0, 127.0], [4800.0, 110.0], [5000.0, 176.0], [4900.0, 132.0], [5100.0, 138.0], [5200.0, 140.0], [5300.0, 125.0], [5600.0, 137.0], [5500.0, 138.0], [5400.0, 139.0], [5800.0, 137.0], [5700.0, 130.0], [6000.0, 128.0], [6100.0, 119.0], [5900.0, 147.0], [6200.0, 120.0], [6300.0, 132.0], [6600.0, 159.0], [6500.0, 161.0], [6400.0, 133.0], [6800.0, 129.0], [6900.0, 145.0], [6700.0, 167.0], [7000.0, 172.0], [7100.0, 167.0], [7400.0, 208.0], [7300.0, 204.0], [7200.0, 197.0], [7500.0, 213.0], [7600.0, 214.0], [7900.0, 220.0], [7800.0, 209.0], [7700.0, 235.0], [8000.0, 249.0], [8100.0, 271.0], [8700.0, 299.0], [8600.0, 289.0], [8400.0, 285.0], [8200.0, 225.0], [8300.0, 309.0], [8500.0, 319.0], [8900.0, 313.0], [8800.0, 306.0], [9100.0, 276.0], [9200.0, 319.0], [9000.0, 310.0], [9300.0, 295.0], [9400.0, 310.0], [9700.0, 307.0], [9500.0, 280.0], [9600.0, 295.0], [9800.0, 278.0], [9900.0, 293.0], [10100.0, 251.0], [10200.0, 251.0], [10000.0, 278.0], [10300.0, 221.0], [10700.0, 198.0], [10400.0, 222.0], [10600.0, 226.0], [10500.0, 224.0], [11000.0, 179.0], [11100.0, 170.0], [10800.0, 204.0], [11200.0, 171.0], [10900.0, 188.0], [11400.0, 194.0], [11300.0, 188.0], [11700.0, 168.0], [11500.0, 188.0], [11600.0, 172.0], [11900.0, 169.0], [12000.0, 168.0], [11800.0, 145.0], [12100.0, 211.0], [12200.0, 215.0], [12400.0, 227.0], [12300.0, 240.0], [12600.0, 250.0], [12500.0, 250.0], [12700.0, 275.0], [12900.0, 308.0], [13000.0, 310.0], [13200.0, 250.0], [12800.0, 252.0], [13100.0, 270.0], [13300.0, 228.0], [13700.0, 212.0], [13800.0, 193.0], [13500.0, 204.0], [13600.0, 225.0], [13400.0, 249.0], [14000.0, 192.0], [14200.0, 155.0], [14300.0, 176.0], [13900.0, 160.0], [14100.0, 165.0], [14600.0, 110.0], [14500.0, 129.0], [14800.0, 132.0], [14400.0, 138.0], [14700.0, 115.0], [15300.0, 103.0], [15200.0, 95.0], [15100.0, 101.0], [15000.0, 121.0], [14900.0, 122.0], [15500.0, 82.0], [15600.0, 88.0], [15700.0, 73.0], [15800.0, 64.0], [15400.0, 78.0], [15900.0, 62.0], [16000.0, 69.0], [16100.0, 46.0], [16200.0, 49.0], [16300.0, 43.0], [17200.0, 20.0], [16800.0, 34.0], [17000.0, 26.0], [16400.0, 46.0], [16600.0, 34.0], [17400.0, 25.0], [17800.0, 21.0], [17600.0, 27.0], [18200.0, 18.0], [18000.0, 17.0], [18400.0, 14.0], [19000.0, 9.0], [19400.0, 11.0], [18800.0, 14.0], [18600.0, 17.0], [19200.0, 16.0], [19800.0, 14.0], [20200.0, 13.0], [20400.0, 14.0], [19600.0, 17.0], [20000.0, 15.0], [21400.0, 11.0], [21000.0, 14.0], [20800.0, 11.0], [20600.0, 18.0], [21200.0, 9.0], [22200.0, 13.0], [21800.0, 12.0], [22400.0, 9.0], [22000.0, 2.0], [21600.0, 14.0], [22600.0, 11.0], [23400.0, 6.0], [22800.0, 10.0], [23200.0, 5.0], [23000.0, 2.0], [23600.0, 7.0], [24400.0, 5.0], [24000.0, 11.0], [23800.0, 7.0], [24200.0, 7.0], [24600.0, 12.0], [25400.0, 7.0], [25200.0, 4.0], [24800.0, 6.0], [25000.0, 4.0], [26400.0, 4.0], [26000.0, 3.0], [25600.0, 4.0], [26600.0, 4.0], [26200.0, 5.0], [25800.0, 1.0], [27400.0, 7.0], [27000.0, 1.0], [26800.0, 1.0], [27200.0, 2.0], [27800.0, 2.0], [28200.0, 2.0], [28400.0, 2.0], [28600.0, 3.0], [28000.0, 1.0], [29600.0, 1.0], [29200.0, 2.0], [29400.0, 1.0], [29000.0, 1.0], [30600.0, 1.0], [30400.0, 2.0], [29800.0, 1.0], [30200.0, 1.0], [31200.0, 1.0], [31600.0, 2.0], [31000.0, 1.0], [30800.0, 1.0], [32800.0, 1.0], [35200.0, 1.0], [42700.0, 1.0], [16900.0, 24.0], [17100.0, 33.0], [16500.0, 31.0], [17300.0, 24.0], [16700.0, 38.0], [17500.0, 21.0], [17700.0, 25.0], [18300.0, 14.0], [18100.0, 16.0], [17900.0, 11.0], [18500.0, 17.0], [19300.0, 18.0], [18900.0, 23.0], [19100.0, 17.0], [18700.0, 20.0], [19500.0, 14.0], [19900.0, 16.0], [20100.0, 13.0], [19700.0, 14.0], [20300.0, 16.0], [21300.0, 10.0], [21500.0, 10.0], [20700.0, 5.0], [21100.0, 9.0], [20900.0, 12.0], [20500.0, 8.0], [21900.0, 10.0], [22300.0, 10.0], [21700.0, 7.0], [22500.0, 5.0], [22100.0, 6.0], [22900.0, 9.0], [23500.0, 4.0], [22700.0, 10.0], [23300.0, 8.0], [23100.0, 2.0], [23700.0, 6.0], [24500.0, 3.0], [24100.0, 3.0], [24300.0, 3.0], [23900.0, 4.0], [25300.0, 8.0], [24900.0, 4.0], [25100.0, 9.0], [24700.0, 4.0], [25500.0, 4.0], [26100.0, 4.0], [25700.0, 10.0], [26500.0, 6.0], [25900.0, 5.0], [26300.0, 1.0], [27100.0, 2.0], [27500.0, 4.0], [27300.0, 4.0], [26900.0, 5.0], [26700.0, 5.0], [27900.0, 5.0], [28500.0, 3.0], [27700.0, 3.0], [28100.0, 3.0], [28900.0, 3.0], [29500.0, 1.0], [29100.0, 1.0], [29300.0, 1.0], [30700.0, 1.0], [30500.0, 1.0], [30300.0, 2.0], [30100.0, 2.0], [29900.0, 2.0], [31500.0, 1.0], [32100.0, 1.0], [35000.0, 1.0]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[0.0, 36110.0], [100.0, 16506.0], [200.0, 12427.0], [300.0, 10299.0], [400.0, 9049.0], [500.0, 8510.0], [600.0, 7720.0], [700.0, 7058.0], [800.0, 6500.0], [900.0, 6662.0], [1000.0, 6009.0], [1100.0, 5465.0], [1200.0, 4707.0], [1300.0, 4430.0], [1400.0, 3854.0], [1500.0, 3683.0], [1600.0, 3086.0], [1700.0, 2838.0], [1800.0, 2669.0], [1900.0, 2476.0], [2000.0, 2206.0], [2100.0, 1984.0], [2200.0, 1987.0], [2300.0, 1846.0], [2400.0, 1809.0], [2500.0, 1670.0], [2600.0, 1599.0], [2700.0, 1613.0], [2800.0, 1327.0], [2900.0, 1360.0], [3000.0, 1015.0], [3100.0, 882.0], [3300.0, 727.0], [3200.0, 799.0], [3400.0, 586.0], [3500.0, 494.0], [3700.0, 503.0], [3600.0, 430.0], [3800.0, 516.0], [3900.0, 529.0], [4000.0, 595.0], [4100.0, 626.0], [4200.0, 604.0], [4300.0, 748.0], [4400.0, 873.0], [4600.0, 1028.0], [4500.0, 902.0], [4700.0, 1016.0], [4800.0, 912.0], [5100.0, 731.0], [5000.0, 830.0], [4900.0, 805.0], [5300.0, 521.0], [5200.0, 611.0], [5600.0, 410.0], [5400.0, 483.0], [5500.0, 477.0], [5700.0, 312.0], [5800.0, 297.0], [6000.0, 199.0], [6100.0, 217.0], [5900.0, 251.0], [6200.0, 147.0], [6300.0, 143.0], [6500.0, 68.0], [6600.0, 74.0], [6400.0, 125.0], [6700.0, 119.0], [6800.0, 138.0], [6900.0, 77.0], [7100.0, 86.0], [7000.0, 77.0], [7300.0, 73.0], [7400.0, 87.0], [7200.0, 78.0], [7600.0, 53.0], [7500.0, 59.0], [7700.0, 64.0], [7900.0, 33.0], [7800.0, 43.0], [8100.0, 78.0], [8000.0, 67.0], [8700.0, 77.0], [8500.0, 88.0], [8200.0, 56.0], [8300.0, 84.0], [8400.0, 101.0], [8600.0, 61.0], [9000.0, 93.0], [8800.0, 83.0], [9100.0, 87.0], [9200.0, 84.0], [8900.0, 104.0], [9500.0, 71.0], [9700.0, 74.0], [9600.0, 60.0], [9400.0, 70.0], [9300.0, 56.0], [9800.0, 60.0], [10100.0, 64.0], [10000.0, 56.0], [9900.0, 75.0], [10200.0, 48.0], [10500.0, 37.0], [10300.0, 52.0], [10400.0, 46.0], [10600.0, 43.0], [10700.0, 37.0], [11200.0, 24.0], [11100.0, 22.0], [11000.0, 25.0], [10800.0, 26.0], [10900.0, 43.0], [11600.0, 22.0], [11300.0, 23.0], [11400.0, 17.0], [11700.0, 18.0], [11500.0, 18.0], [11800.0, 23.0], [12000.0, 25.0], [12100.0, 26.0], [12200.0, 11.0], [11900.0, 21.0], [12500.0, 26.0], [12400.0, 19.0], [12600.0, 11.0], [12700.0, 16.0], [12300.0, 19.0], [12800.0, 10.0], [12900.0, 15.0], [13100.0, 16.0], [13000.0, 13.0], [13300.0, 14.0], [13200.0, 13.0], [13400.0, 20.0], [13500.0, 14.0], [13600.0, 29.0], [13800.0, 17.0], [13700.0, 13.0], [14000.0, 15.0], [13900.0, 10.0], [14200.0, 18.0], [14300.0, 12.0], [14100.0, 9.0], [14400.0, 19.0], [14800.0, 9.0], [14500.0, 21.0], [14600.0, 15.0], [14700.0, 13.0], [15000.0, 7.0], [15200.0, 6.0], [14900.0, 11.0], [15100.0, 5.0], [15300.0, 10.0], [15400.0, 6.0], [15600.0, 11.0], [15500.0, 8.0], [15700.0, 11.0], [15800.0, 10.0], [15900.0, 10.0], [16200.0, 10.0], [16000.0, 8.0], [16100.0, 11.0], [16300.0, 10.0], [16400.0, 12.0], [16800.0, 6.0], [17000.0, 5.0], [16600.0, 3.0], [17200.0, 4.0], [17400.0, 5.0], [17600.0, 5.0], [17800.0, 4.0], [18400.0, 5.0], [18000.0, 5.0], [18200.0, 2.0], [18600.0, 4.0], [18800.0, 6.0], [19200.0, 1.0], [20400.0, 2.0], [20200.0, 2.0], [19800.0, 3.0], [19600.0, 2.0], [21000.0, 1.0], [21200.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [20600.0, 3.0], [21600.0, 2.0], [22200.0, 4.0], [22400.0, 2.0], [22000.0, 1.0], [23400.0, 1.0], [24000.0, 1.0], [24200.0, 1.0], [27200.0, 1.0], [28400.0, 1.0], [29000.0, 1.0], [29600.0, 1.0], [17300.0, 3.0], [16900.0, 4.0], [16500.0, 5.0], [17100.0, 3.0], [16700.0, 7.0], [17500.0, 2.0], [17900.0, 2.0], [18900.0, 2.0], [19300.0, 3.0], [18700.0, 2.0], [19100.0, 1.0], [18500.0, 1.0], [20100.0, 1.0], [20300.0, 1.0], [19500.0, 1.0], [21100.0, 1.0], [21300.0, 1.0], [20900.0, 1.0], [21500.0, 1.0], [20500.0, 1.0], [21700.0, 1.0], [22100.0, 3.0], [22300.0, 1.0], [21900.0, 1.0], [23100.0, 1.0], [23300.0, 2.0], [23500.0, 1.0], [22700.0, 2.0], [26100.0, 1.0], [27900.0, 1.0], [28300.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [30100.0, 1.0], [34600.0, 1.0]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 42700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 89927.0, "series": [{"data": [[0.0, 89927.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 64689.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 83368.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 300.0, "minX": 1.59458208E12, "maxY": 300.0, "series": [{"data": [[1.59458238E12, 300.0], [1.59458268E12, 300.0], [1.59458298E12, 300.0], [1.59458232E12, 300.0], [1.59458262E12, 300.0], [1.59458292E12, 300.0], [1.59458226E12, 300.0], [1.59458256E12, 300.0], [1.59458208E12, 300.0], [1.59458286E12, 300.0], [1.5945822E12, 300.0], [1.5945825E12, 300.0], [1.5945828E12, 300.0], [1.59458214E12, 300.0], [1.59458244E12, 300.0], [1.59458274E12, 300.0]], "isOverall": false, "label": "Thread Group GET product", "isController": false}, {"data": [[1.59458238E12, 300.0], [1.59458268E12, 300.0], [1.59458298E12, 300.0], [1.59458232E12, 300.0], [1.59458262E12, 300.0], [1.59458292E12, 300.0], [1.59458226E12, 300.0], [1.59458256E12, 300.0], [1.59458208E12, 300.0], [1.59458286E12, 300.0], [1.5945822E12, 300.0], [1.5945825E12, 300.0], [1.5945828E12, 300.0], [1.59458214E12, 300.0], [1.59458244E12, 300.0], [1.59458274E12, 300.0]], "isOverall": false, "label": "Thread Group GET product list", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1341.6346655835719, "minX": 558.0, "maxY": 9861.0, "series": [{"data": [[558.0, 8893.300000000001], [564.0, 9032.333333333334], [566.0, 9240.0], [567.0, 9282.0], [569.0, 9175.0], [570.0, 9147.0], [572.0, 9424.333333333334], [573.0, 9320.647058823528], [574.0, 9343.0], [579.0, 9408.0], [576.0, 9144.0], [581.0, 9716.0], [582.0, 9194.0], [584.0, 9058.0], [585.0, 9378.0], [589.0, 9830.0], [591.0, 9398.5], [593.0, 9661.0], [600.0, 7494.403017779328], [594.0, 9607.0], [595.0, 9861.0]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[599.9598127735012, 7496.994682324244]], "isOverall": false, "label": "HTTP Request GET product list-Aggregated", "isController": false}, {"data": [[600.0, 1341.6346655835719]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}, {"data": [[600.0, 1341.6346655835719]], "isOverall": false, "label": "HTTP Request GET random product by id-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 616.85, "minX": 1.59458208E12, "maxY": 4059232.7, "series": [{"data": [[1.59458238E12, 1677358.7666666666], [1.59458268E12, 3140450.8833333333], [1.59458298E12, 2705366.8666666667], [1.59458232E12, 1538435.2], [1.59458262E12, 2932424.8666666667], [1.59458292E12, 2857649.466666667], [1.59458226E12, 1603233.0], [1.59458256E12, 2621667.6166666667], [1.59458208E12, 201085.1], [1.59458286E12, 3417187.7], [1.5945822E12, 1846589.0166666666], [1.5945825E12, 1809009.85], [1.5945828E12, 4059232.7], [1.59458214E12, 1986380.6666666667], [1.59458244E12, 1700497.0], [1.59458274E12, 3903121.316666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59458238E12, 43312.583333333336], [1.59458268E12, 23457.466666666667], [1.59458298E12, 40864.86666666667], [1.59458232E12, 42012.63333333333], [1.59458262E12, 22961.15], [1.59458292E12, 51774.683333333334], [1.59458226E12, 34048.21666666667], [1.59458256E12, 30920.45], [1.59458208E12, 616.85], [1.59458286E12, 35102.1], [1.5945822E12, 27215.4], [1.5945825E12, 43048.25], [1.5945828E12, 23239.683333333334], [1.59458214E12, 10261.716666666667], [1.59458244E12, 48147.816666666666], [1.59458274E12, 20036.116666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 833.0066600217464, "minX": 1.59458208E12, "maxY": 12673.245428973269, "series": [{"data": [[1.59458238E12, 11613.853737113423], [1.59458268E12, 5902.346472341829], [1.59458298E12, 5953.055881203596], [1.59458232E12, 12673.245428973269], [1.59458262E12, 6337.545099431811], [1.59458292E12, 6739.345867460893], [1.59458226E12, 12012.503337783723], [1.59458256E12, 7408.117694155326], [1.59458208E12, 11950.44102564102], [1.59458286E12, 5527.037672281794], [1.5945822E12, 9927.045766590396], [1.5945825E12, 10669.605591909578], [1.5945828E12, 4592.410217113643], [1.59458214E12, 9939.706986444215], [1.59458244E12, 11281.372523961661], [1.59458274E12, 4981.579464048816]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458238E12, 935.1692355922472], [1.59458268E12, 2160.789071965106], [1.59458298E12, 894.3604377500585], [1.59458232E12, 974.6282113167085], [1.59458262E12, 2166.0597759922193], [1.59458292E12, 833.0066600217464], [1.59458226E12, 1226.1774499187882], [1.59458256E12, 1444.3752841831686], [1.59458208E12, 11278.752380952388], [1.59458286E12, 1344.1018723278755], [1.5945822E12, 1635.7726345659266], [1.5945825E12, 940.744321490972], [1.5945828E12, 2516.6470749793934], [1.59458214E12, 6495.345976253286], [1.59458244E12, 839.3824833185587], [1.59458274E12, 3057.257758182124]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 779.5535905930626, "minX": 1.59458208E12, "maxY": 12285.79043600564, "series": [{"data": [[1.59458238E12, 11230.073453608236], [1.59458268E12, 5791.9317654852675], [1.59458298E12, 5688.759280969123], [1.59458232E12, 12285.79043600564], [1.59458262E12, 6171.777343749995], [1.59458292E12, 6451.143708116161], [1.59458226E12, 11653.758344459275], [1.59458256E12, 7179.586068855092], [1.59458208E12, 11487.194871794865], [1.59458286E12, 5309.948851454828], [1.5945822E12, 9602.43764302061], [1.5945825E12, 10331.001784651984], [1.5945828E12, 4427.502681992345], [1.59458214E12, 9712.782586027119], [1.59458244E12, 10909.635782747619], [1.59458274E12, 4839.3329795701775]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458238E12, 877.0402319870419], [1.59458268E12, 2142.679549309414], [1.59458298E12, 859.8365497764192], [1.59458232E12, 897.7243228747654], [1.59458262E12, 2143.8389335281245], [1.59458292E12, 797.6919626676337], [1.59458226E12, 1162.9286681104493], [1.59458256E12, 1410.3329814874976], [1.59458208E12, 10956.352380952381], [1.59458286E12, 1313.9026242075802], [1.5945822E12, 1579.9703821938435], [1.5945825E12, 870.5010324561916], [1.5945828E12, 2496.4108761329376], [1.59458214E12, 6462.967348284942], [1.59458244E12, 779.5535905930626], [1.59458274E12, 3040.05833474649]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.005119608553823856, "minX": 1.59458208E12, "maxY": 9.969230769230771, "series": [{"data": [[1.59458238E12, 0.09471649484536095], [1.59458268E12, 0.04736667770785029], [1.59458298E12, 0.04181320828448618], [1.59458232E12, 0.10407876230661016], [1.59458262E12, 0.04971590909090908], [1.59458292E12, 0.038346984363365706], [1.59458226E12, 0.09546061415220289], [1.59458256E12, 0.0544435548438751], [1.59458208E12, 9.969230769230771], [1.59458286E12, 0.040122511485451685], [1.5945822E12, 0.04233409610983988], [1.5945825E12, 0.08268887566924446], [1.5945828E12, 0.03473818646232445], [1.59458214E12, 0.23149113660062556], [1.59458244E12, 0.08817891373801917], [1.59458274E12, 0.03979835500132664]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458238E12, 0.006635665395266232], [1.59458268E12, 0.017809546886358163], [1.59458298E12, 0.006766297952459374], [1.59458232E12, 0.008098685974792165], [1.59458262E12, 0.01631361090820554], [1.59458292E12, 0.005119608553823856], [1.59458226E12, 0.009339469409853841], [1.59458256E12, 0.009175056836635215], [1.59458208E12, 1.123809523809524], [1.59458286E12, 0.010393631136665185], [1.5945822E12, 0.01409949454642193], [1.5945825E12, 0.0055064329962407855], [1.5945828E12, 0.01744026366382854], [1.59458214E12, 0.1286279683377307], [1.59458244E12, 0.006159301945779503], [1.59458274E12, 0.02221468543327126]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.59458208E12, "maxY": 32196.0, "series": [{"data": [[1.59458238E12, 27911.0], [1.59458268E12, 29395.0], [1.59458298E12, 24959.0], [1.59458232E12, 31639.0], [1.59458262E12, 31625.0], [1.59458292E12, 29204.0], [1.59458226E12, 30777.0], [1.59458256E12, 30316.0], [1.59458208E12, 15528.0], [1.59458286E12, 30237.0], [1.5945822E12, 30164.0], [1.5945825E12, 29443.0], [1.5945828E12, 27476.0], [1.59458214E12, 29695.0], [1.59458244E12, 32196.0], [1.59458274E12, 28103.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59458238E12, 6.0], [1.59458268E12, 3.0], [1.59458298E12, 4.0], [1.59458232E12, 7.0], [1.59458262E12, 3.0], [1.59458292E12, 5.0], [1.59458226E12, 4.0], [1.59458256E12, 3.0], [1.59458208E12, 84.39699763178825], [1.59458286E12, 3.0], [1.5945822E12, 6.0], [1.5945825E12, 6.0], [1.5945828E12, 3.0], [1.59458214E12, 15.549998819828033], [1.59458244E12, 6.0], [1.59458274E12, 3.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59458238E12, 6.0], [1.59458268E12, 3.0], [1.59458298E12, 4.0], [1.59458232E12, 7.0], [1.59458262E12, 3.0], [1.59458292E12, 6.0], [1.59458226E12, 4.0], [1.59458256E12, 3.0], [1.59458208E12, 93.3367009472847], [1.59458286E12, 3.0], [1.5945822E12, 6.957401242256168], [1.5945825E12, 7.0], [1.5945828E12, 3.0], [1.59458214E12, 16.0], [1.59458244E12, 7.0], [1.59458274E12, 3.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59458238E12, 6.0], [1.59458268E12, 3.0], [1.59458298E12, 4.0], [1.59458232E12, 7.0], [1.59458262E12, 3.0], [1.59458292E12, 5.009497615694983], [1.59458226E12, 4.0], [1.59458256E12, 3.0], [1.59458208E12, 89.36349881589412], [1.59458286E12, 3.0], [1.5945822E12, 6.0], [1.5945825E12, 6.0], [1.5945828E12, 3.0], [1.59458214E12, 16.0], [1.59458244E12, 7.0], [1.59458274E12, 3.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59458238E12, 2.0], [1.59458268E12, 1.0], [1.59458298E12, 1.0], [1.59458232E12, 1.0], [1.59458262E12, 1.0], [1.59458292E12, 1.0], [1.59458226E12, 1.0], [1.59458256E12, 1.0], [1.59458208E12, 47.0], [1.59458286E12, 1.0], [1.5945822E12, 2.0], [1.5945825E12, 1.0], [1.5945828E12, 1.0], [1.59458214E12, 4.0], [1.59458244E12, 1.0], [1.59458274E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59458238E12, 899.0], [1.59458268E12, 395.0], [1.59458298E12, 709.0], [1.59458232E12, 880.0], [1.59458262E12, 599.0], [1.59458292E12, 681.0], [1.59458226E12, 693.0], [1.59458256E12, 953.0], [1.59458208E12, 12402.5], [1.59458286E12, 1197.0], [1.5945822E12, 1232.0], [1.5945825E12, 779.0], [1.5945828E12, 915.0], [1.59458214E12, 7720.0], [1.59458244E12, 767.5], [1.59458274E12, 780.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 230.0, "minX": 1.0, "maxY": 42714.0, "series": [{"data": [[10.0, 8950.0], [17.0, 9914.0], [21.0, 11664.0], [22.0, 15583.0], [27.0, 285.0], [37.0, 9336.0], [38.0, 12834.0], [39.0, 14169.0], [43.0, 13780.0], [44.0, 7054.5], [45.0, 11159.0], [46.0, 12451.0], [47.0, 3080.0], [48.0, 1112.0], [51.0, 16173.0], [52.0, 7652.0], [53.0, 10097.0], [54.0, 9035.0], [57.0, 13728.0], [56.0, 7840.0], [58.0, 7621.0], [59.0, 1184.0], [61.0, 5336.5], [60.0, 8582.5], [62.0, 8486.5], [63.0, 7792.0], [67.0, 15225.5], [64.0, 3694.0], [65.0, 394.0], [68.0, 5428.5], [69.0, 4774.5], [73.0, 11643.0], [75.0, 13026.0], [72.0, 1956.5], [74.0, 4289.5], [76.0, 4671.0], [79.0, 12145.5], [78.0, 10689.0], [77.0, 1212.0], [81.0, 7888.0], [83.0, 8121.0], [87.0, 5995.0], [85.0, 1915.5], [86.0, 1175.5], [91.0, 5016.5], [90.0, 9898.0], [89.0, 5911.0], [88.0, 613.5], [95.0, 1500.0], [92.0, 7394.0], [94.0, 5089.5], [99.0, 7415.0], [96.0, 1002.0], [97.0, 2853.0], [98.0, 285.0], [101.0, 3939.5], [102.0, 4128.5], [100.0, 6310.5], [103.0, 3487.0], [107.0, 8617.0], [106.0, 5753.0], [105.0, 2387.0], [109.0, 3473.0], [110.0, 2161.0], [108.0, 5081.0], [114.0, 6427.0], [113.0, 5498.0], [112.0, 1902.5], [115.0, 2186.0], [116.0, 5355.5], [117.0, 4318.0], [119.0, 562.0], [122.0, 1638.0], [123.0, 1369.5], [121.0, 230.0], [125.0, 2380.0], [126.0, 856.0], [124.0, 948.5], [127.0, 392.0], [129.0, 2654.5], [132.0, 810.0], [128.0, 661.0], [134.0, 4946.0], [130.0, 1200.5], [143.0, 2780.0], [142.0, 3342.0], [141.0, 1108.0], [138.0, 302.5], [136.0, 813.0], [137.0, 1782.5], [140.0, 4408.0], [150.0, 1295.5], [144.0, 2500.0], [146.0, 2474.0], [145.0, 3116.5], [148.0, 1222.0], [151.0, 847.0], [147.0, 806.5], [149.0, 512.0], [156.0, 4314.5], [158.0, 2083.0], [154.0, 1407.0], [152.0, 705.0], [157.0, 1733.0], [153.0, 1728.5], [159.0, 1171.0], [155.0, 415.5], [164.0, 1014.0], [160.0, 1744.5], [163.0, 1379.0], [167.0, 1374.5], [166.0, 2177.0], [165.0, 3920.0], [161.0, 1506.0], [162.0, 1992.0], [175.0, 1801.5], [174.0, 1215.5], [169.0, 1196.0], [171.0, 1207.5], [172.0, 1385.0], [173.0, 3559.0], [168.0, 673.0], [177.0, 2081.0], [178.0, 1991.0], [180.0, 807.0], [179.0, 1361.5], [181.0, 1962.0], [182.0, 985.5], [176.0, 315.0], [183.0, 302.5], [184.0, 2294.0], [185.0, 932.0], [188.0, 795.5], [187.0, 723.0], [186.0, 503.5], [190.0, 534.5], [191.0, 2483.0], [189.0, 570.5], [198.0, 2443.0], [193.0, 670.5], [199.0, 2505.5], [197.0, 1579.0], [196.0, 1082.5], [194.0, 387.0], [192.0, 1583.0], [203.0, 1671.0], [202.0, 1075.0], [200.0, 1842.5], [207.0, 1372.0], [206.0, 4083.5], [204.0, 774.0], [201.0, 4562.0], [205.0, 384.0], [210.0, 1068.5], [214.0, 1092.0], [213.0, 1246.0], [212.0, 699.5], [211.0, 388.0], [208.0, 543.5], [209.0, 396.0], [219.0, 1038.0], [223.0, 1160.0], [222.0, 1825.0], [218.0, 1611.0], [217.0, 1235.0], [216.0, 650.0], [221.0, 500.0], [220.0, 1579.5], [228.0, 1446.0], [230.0, 1869.0], [229.0, 2188.0], [231.0, 602.0], [227.0, 1101.0], [226.0, 1443.0], [224.0, 802.5], [225.0, 784.0], [237.0, 1471.0], [234.0, 1163.5], [236.0, 623.0], [235.0, 1014.0], [232.0, 712.0], [239.0, 1286.0], [238.0, 293.0], [233.0, 1601.5], [246.0, 1113.5], [241.0, 1547.5], [244.0, 1708.0], [247.0, 1086.0], [240.0, 1112.5], [245.0, 773.0], [242.0, 959.0], [243.0, 1128.0], [249.0, 1031.0], [248.0, 1161.5], [255.0, 1172.0], [251.0, 1199.0], [250.0, 889.5], [253.0, 1342.5], [252.0, 977.5], [271.0, 997.0], [257.0, 1101.0], [264.0, 732.5], [262.0, 1069.5], [263.0, 774.0], [256.0, 844.5], [259.0, 485.0], [258.0, 331.0], [270.0, 1882.0], [269.0, 482.5], [261.0, 1614.5], [268.0, 1353.0], [266.0, 1004.0], [267.0, 1279.0], [265.0, 886.0], [275.0, 1630.0], [280.0, 709.0], [281.0, 1069.0], [282.0, 845.5], [283.0, 921.0], [279.0, 302.0], [277.0, 658.0], [276.0, 1444.0], [273.0, 703.0], [272.0, 361.0], [285.0, 1282.0], [284.0, 1067.0], [274.0, 465.0], [287.0, 1009.0], [286.0, 1232.0], [290.0, 443.0], [295.0, 1430.0], [292.0, 911.0], [291.0, 1812.0], [300.0, 1071.0], [293.0, 1814.0], [301.0, 921.5], [294.0, 531.0], [298.0, 701.0], [299.0, 554.5], [302.0, 1122.0], [296.0, 423.5], [303.0, 327.0], [288.0, 796.0], [289.0, 2376.0], [306.0, 693.5], [310.0, 2328.0], [307.0, 376.0], [311.0, 935.0], [313.0, 816.0], [315.0, 1175.0], [314.0, 924.0], [304.0, 2473.0], [312.0, 889.0], [316.0, 1346.5], [309.0, 1278.0], [334.0, 815.5], [328.0, 1205.0], [327.0, 1220.0], [321.0, 1327.5], [320.0, 1258.5], [331.0, 919.0], [335.0, 1480.5], [330.0, 576.0], [329.0, 894.0], [324.0, 1036.0], [326.0, 534.0], [322.0, 775.0], [323.0, 597.0], [339.0, 724.0], [351.0, 504.0], [342.0, 713.0], [343.0, 1727.0], [345.0, 966.0], [347.0, 339.0], [336.0, 816.5], [348.0, 733.5], [349.0, 1273.5], [337.0, 620.0], [340.0, 1065.5], [366.0, 802.5], [363.0, 609.5], [362.0, 295.5], [358.0, 699.0], [359.0, 1736.0], [361.0, 748.5], [354.0, 1013.5], [365.0, 785.0], [360.0, 463.0], [355.0, 685.0], [364.0, 2514.5], [382.0, 828.5], [377.0, 884.0], [378.0, 881.0], [373.0, 633.5], [372.0, 781.0], [379.0, 448.5], [375.0, 1205.5], [376.0, 1328.0], [383.0, 832.0], [374.0, 882.5], [370.0, 1904.0], [371.0, 1209.0], [369.0, 908.0], [385.0, 975.0], [392.0, 766.5], [398.0, 930.0], [387.0, 631.0], [397.0, 799.0], [390.0, 625.5], [393.0, 536.5], [388.0, 810.0], [394.0, 733.0], [391.0, 485.0], [384.0, 1563.5], [389.0, 728.0], [400.0, 595.5], [410.0, 828.0], [408.0, 409.0], [412.0, 405.0], [403.0, 732.0], [415.0, 1359.0], [407.0, 880.0], [417.0, 818.5], [424.0, 914.5], [422.0, 705.0], [423.0, 972.0], [421.0, 494.0], [416.0, 768.5], [431.0, 678.0], [425.0, 643.0], [426.0, 706.5], [427.0, 1337.0], [429.0, 1195.0], [428.0, 913.0], [419.0, 822.0], [433.0, 705.0], [439.0, 761.5], [440.0, 736.5], [437.0, 574.0], [436.0, 1123.0], [442.0, 970.0], [434.0, 685.5], [432.0, 1396.5], [435.0, 679.0], [445.0, 806.0], [438.0, 724.0], [463.0, 713.0], [448.0, 607.0], [455.0, 773.0], [457.0, 931.0], [458.0, 768.0], [456.0, 621.0], [449.0, 648.0], [460.0, 676.5], [462.0, 814.0], [452.0, 505.5], [454.0, 672.5], [477.0, 402.0], [475.0, 624.0], [474.0, 964.0], [467.0, 607.0], [478.0, 721.5], [466.0, 667.0], [473.0, 875.0], [469.0, 903.0], [468.0, 419.5], [464.0, 693.5], [470.0, 569.5], [493.0, 575.0], [480.0, 498.0], [484.0, 491.5], [492.0, 820.0], [489.0, 976.0], [491.0, 914.5], [488.0, 586.0], [487.0, 565.0], [494.0, 509.5], [497.0, 809.0], [504.0, 673.0], [496.0, 955.5], [509.0, 674.0], [506.0, 632.0], [505.0, 535.5], [508.0, 601.5], [502.0, 987.5], [511.0, 574.0], [538.0, 675.5], [529.0, 720.0], [528.0, 728.5], [526.0, 597.0], [537.0, 687.0], [536.0, 802.5], [513.0, 390.0], [533.0, 593.0], [522.0, 801.0], [525.0, 683.0], [535.0, 619.0], [531.0, 807.0], [553.0, 496.0], [551.0, 532.5], [559.0, 626.0], [571.0, 532.0], [575.0, 563.0], [558.0, 608.5], [557.0, 331.0], [560.0, 694.5], [584.0, 467.0], [579.0, 543.0], [588.0, 568.0], [600.0, 623.0], [597.0, 624.0], [638.0, 520.0], [620.0, 655.5], [615.0, 618.0], [656.0, 370.5], [678.0, 393.0], [707.0, 415.0], [1.0, 10237.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[268.0, 31269.0], [284.0, 42714.0], [148.0, 32821.0], [79.0, 30434.0], [379.0, 35048.0], [474.0, 30465.0], [467.0, 30582.0], [466.0, 31019.0], [242.0, 35277.0], [125.0, 34681.0], [505.0, 30389.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 707.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 117.0, "minX": 1.0, "maxY": 42550.0, "series": [{"data": [[10.0, 7604.5], [17.0, 9626.0], [21.0, 10229.0], [22.0, 15328.5], [27.0, 196.0], [37.0, 8538.0], [38.0, 12784.5], [39.0, 13985.0], [43.0, 13609.0], [44.0, 7007.0], [45.0, 10779.0], [46.0, 12335.0], [47.0, 2920.0], [48.0, 866.0], [51.0, 15914.0], [52.0, 7500.0], [53.0, 10064.0], [54.0, 8993.0], [57.0, 13728.0], [56.0, 7742.0], [58.0, 7554.0], [59.0, 1091.0], [61.0, 5271.5], [60.0, 8382.5], [62.0, 8302.0], [63.0, 7718.0], [67.0, 15188.5], [64.0, 3622.0], [65.0, 210.0], [68.0, 5332.5], [69.0, 4741.0], [73.0, 11639.0], [75.0, 13022.0], [72.0, 1888.5], [74.0, 4257.0], [76.0, 4630.0], [79.0, 11996.5], [78.0, 10563.0], [77.0, 1182.0], [81.0, 7788.0], [83.0, 7384.0], [87.0, 5893.0], [85.0, 1735.5], [86.0, 1130.0], [91.0, 5011.5], [90.0, 9878.0], [89.0, 5793.0], [88.0, 611.5], [95.0, 1428.0], [92.0, 7374.0], [94.0, 4994.5], [99.0, 7388.0], [96.0, 740.5], [97.0, 2802.0], [98.0, 191.5], [101.0, 3924.0], [102.0, 3882.5], [100.0, 6271.0], [103.0, 3487.0], [107.0, 8583.0], [106.0, 5598.0], [105.0, 2271.0], [109.0, 3330.0], [110.0, 1331.5], [108.0, 5069.0], [114.0, 6421.5], [113.0, 5457.0], [112.0, 1797.0], [115.0, 2014.5], [116.0, 5321.0], [117.0, 4184.0], [119.0, 555.0], [122.0, 1577.0], [123.0, 902.0], [121.0, 117.0], [125.0, 2258.0], [126.0, 614.0], [124.0, 878.0], [127.0, 348.0], [129.0, 2615.5], [132.0, 630.5], [128.0, 618.0], [134.0, 4933.5], [130.0, 1067.0], [143.0, 2780.0], [142.0, 3312.5], [141.0, 1026.5], [138.0, 177.5], [136.0, 680.5], [137.0, 1412.5], [140.0, 4404.5], [150.0, 1208.0], [144.0, 2372.0], [146.0, 2409.0], [145.0, 3032.5], [148.0, 948.0], [151.0, 623.0], [147.0, 723.5], [149.0, 398.0], [156.0, 4295.0], [158.0, 1326.5], [154.0, 1357.5], [152.0, 675.0], [157.0, 1728.0], [153.0, 1563.5], [159.0, 1085.0], [155.0, 258.5], [164.0, 888.5], [160.0, 1491.5], [163.0, 1192.0], [167.0, 1109.5], [166.0, 2106.0], [165.0, 3920.0], [161.0, 1472.0], [162.0, 1985.5], [175.0, 1709.0], [174.0, 1166.5], [169.0, 1172.0], [171.0, 1058.0], [172.0, 1271.5], [173.0, 3427.0], [168.0, 565.0], [177.0, 1970.0], [178.0, 1845.0], [180.0, 712.0], [179.0, 1317.0], [181.0, 1923.0], [182.0, 755.0], [176.0, 263.5], [183.0, 205.0], [184.0, 2227.0], [185.0, 887.0], [188.0, 738.0], [187.0, 700.0], [186.0, 397.5], [190.0, 306.5], [191.0, 2426.0], [189.0, 394.5], [198.0, 2385.0], [193.0, 515.0], [199.0, 2465.5], [197.0, 1522.0], [196.0, 1021.5], [194.0, 365.5], [192.0, 1280.0], [203.0, 1129.0], [202.0, 1026.0], [200.0, 1832.5], [207.0, 1356.0], [206.0, 4080.5], [204.0, 689.5], [201.0, 4547.0], [205.0, 341.0], [210.0, 902.5], [214.0, 1036.0], [213.0, 1128.0], [212.0, 620.0], [211.0, 307.0], [208.0, 353.0], [209.0, 283.0], [219.0, 1016.0], [223.0, 1125.5], [222.0, 1818.5], [218.0, 1600.5], [217.0, 1205.0], [216.0, 526.5], [221.0, 410.0], [220.0, 1536.5], [228.0, 1400.0], [230.0, 1726.0], [229.0, 2176.0], [231.0, 407.5], [227.0, 1090.0], [226.0, 1317.5], [224.0, 728.0], [225.0, 664.0], [237.0, 1193.0], [234.0, 1041.5], [236.0, 593.5], [235.0, 988.0], [232.0, 501.0], [239.0, 1232.5], [238.0, 204.5], [233.0, 1414.5], [246.0, 1062.5], [241.0, 1537.5], [244.0, 801.0], [247.0, 1064.5], [240.0, 1026.5], [245.0, 712.0], [242.0, 917.0], [243.0, 1090.0], [249.0, 899.0], [248.0, 1075.5], [255.0, 941.0], [251.0, 1157.0], [250.0, 873.0], [253.0, 1295.0], [252.0, 816.5], [271.0, 976.5], [257.0, 1083.0], [264.0, 498.5], [262.0, 1000.5], [263.0, 630.0], [256.0, 724.0], [259.0, 445.0], [258.0, 315.5], [270.0, 1870.0], [269.0, 300.0], [261.0, 1590.0], [268.0, 1305.0], [266.0, 977.5], [267.0, 1279.0], [265.0, 760.0], [275.0, 1598.5], [280.0, 540.5], [281.0, 906.5], [282.0, 502.0], [283.0, 746.0], [279.0, 280.0], [277.0, 512.0], [276.0, 1410.0], [273.0, 578.0], [272.0, 302.0], [285.0, 1215.0], [284.0, 975.0], [274.0, 407.0], [287.0, 993.0], [286.0, 1000.0], [290.0, 349.0], [295.0, 1402.0], [292.0, 884.0], [291.0, 1797.0], [300.0, 1013.0], [293.0, 1671.0], [301.0, 807.0], [294.0, 448.5], [298.0, 501.0], [299.0, 488.0], [302.0, 1108.0], [296.0, 388.5], [303.0, 292.0], [288.0, 781.0], [289.0, 2313.0], [306.0, 621.5], [310.0, 2202.5], [307.0, 299.0], [311.0, 867.5], [313.0, 689.5], [315.0, 1079.0], [314.0, 826.0], [304.0, 2469.0], [312.0, 833.0], [316.0, 1331.0], [309.0, 1166.0], [334.0, 713.5], [328.0, 1119.5], [327.0, 912.5], [321.0, 1219.0], [320.0, 1196.0], [331.0, 888.0], [335.0, 1409.5], [330.0, 497.5], [329.0, 812.0], [324.0, 1002.0], [326.0, 444.0], [322.0, 710.5], [323.0, 576.0], [339.0, 624.0], [351.0, 478.0], [342.0, 624.0], [343.0, 1698.0], [345.0, 715.5], [347.0, 328.0], [336.0, 748.5], [348.0, 697.5], [349.0, 1227.0], [337.0, 586.0], [340.0, 1017.0], [366.0, 735.5], [363.0, 589.0], [362.0, 262.0], [358.0, 590.5], [359.0, 1725.0], [361.0, 691.0], [354.0, 1011.0], [365.0, 692.0], [360.0, 413.0], [355.0, 613.5], [364.0, 2505.0], [382.0, 639.5], [377.0, 823.0], [378.0, 873.5], [373.0, 606.5], [372.0, 587.0], [379.0, 398.5], [375.0, 1167.0], [376.0, 1197.0], [383.0, 795.5], [374.0, 805.0], [370.0, 1817.5], [371.0, 1202.0], [369.0, 872.0], [385.0, 943.0], [392.0, 630.0], [398.0, 914.5], [387.0, 590.0], [397.0, 696.0], [390.0, 534.5], [393.0, 495.0], [388.0, 770.5], [394.0, 702.5], [391.0, 418.0], [384.0, 1478.5], [389.0, 690.0], [400.0, 403.5], [410.0, 804.5], [408.0, 370.0], [412.0, 395.5], [403.0, 699.0], [415.0, 1333.0], [407.0, 807.0], [417.0, 787.5], [424.0, 897.0], [422.0, 635.0], [423.0, 914.0], [421.0, 438.5], [416.0, 697.0], [431.0, 623.0], [425.0, 582.0], [426.0, 554.0], [427.0, 1312.0], [429.0, 1174.5], [428.0, 899.5], [419.0, 789.0], [433.0, 690.0], [439.0, 722.5], [440.0, 709.5], [437.0, 489.5], [436.0, 1110.0], [442.0, 922.0], [434.0, 629.0], [432.0, 1335.0], [435.0, 612.0], [445.0, 777.0], [438.0, 680.5], [463.0, 689.0], [448.0, 524.0], [455.0, 712.0], [457.0, 919.0], [458.0, 760.0], [456.0, 602.0], [449.0, 612.0], [460.0, 618.0], [462.0, 710.0], [452.0, 479.0], [454.0, 639.5], [477.0, 308.0], [475.0, 596.0], [474.0, 928.0], [467.0, 563.0], [478.0, 683.5], [466.0, 601.0], [473.0, 809.0], [469.0, 838.0], [468.0, 407.5], [464.0, 617.0], [470.0, 511.0], [493.0, 510.0], [480.0, 379.0], [484.0, 418.5], [492.0, 814.5], [489.0, 885.0], [491.0, 891.5], [488.0, 570.0], [487.0, 539.0], [494.0, 483.0], [497.0, 792.0], [504.0, 505.0], [496.0, 897.0], [509.0, 613.0], [506.0, 600.5], [505.0, 502.5], [508.0, 516.5], [502.0, 984.0], [511.0, 571.0], [538.0, 645.5], [529.0, 633.0], [528.0, 712.0], [526.0, 551.0], [537.0, 646.0], [536.0, 789.5], [513.0, 376.0], [533.0, 552.0], [522.0, 791.0], [525.0, 647.0], [535.0, 611.5], [531.0, 798.0], [553.0, 456.5], [551.0, 515.0], [559.0, 611.0], [571.0, 488.0], [575.0, 542.0], [558.0, 589.0], [557.0, 315.0], [560.0, 686.5], [584.0, 435.0], [579.0, 521.0], [588.0, 524.5], [600.0, 617.0], [597.0, 603.0], [638.0, 507.5], [620.0, 640.5], [615.0, 603.0], [656.0, 354.0], [678.0, 375.5], [707.0, 406.0], [1.0, 10160.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[268.0, 31178.0], [284.0, 42550.0], [148.0, 32821.0], [79.0, 30433.0], [379.0, 35047.0], [474.0, 30465.0], [467.0, 30581.0], [466.0, 30884.0], [242.0, 35266.0], [125.0, 34681.0], [505.0, 30389.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 707.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.59458208E12, "maxY": 412.6333333333333, "series": [{"data": [[1.59458238E12, 344.85], [1.59458268E12, 187.88333333333333], [1.59458298E12, 315.9166666666667], [1.59458232E12, 334.45], [1.59458262E12, 183.83333333333334], [1.59458292E12, 412.6333333333333], [1.59458226E12, 271.23333333333335], [1.59458256E12, 246.9], [1.59458208E12, 15.0], [1.59458286E12, 280.51666666666665], [1.5945822E12, 217.08333333333334], [1.5945825E12, 342.8], [1.5945828E12, 186.61666666666667], [1.59458214E12, 82.5], [1.59458244E12, 383.26666666666665], [1.59458274E12, 161.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458298E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59458208E12, "maxY": 412.6333333333333, "series": [{"data": [[1.59458238E12, 344.8333333333333], [1.59458268E12, 187.86666666666667], [1.59458298E12, 325.9166666666667], [1.59458232E12, 334.3833333333333], [1.59458262E12, 183.83333333333334], [1.59458292E12, 412.6333333333333], [1.59458226E12, 271.21666666666664], [1.59458256E12, 246.88333333333333], [1.59458208E12, 5.0], [1.59458286E12, 280.51666666666665], [1.5945822E12, 217.08333333333334], [1.5945825E12, 342.78333333333336], [1.5945828E12, 186.61666666666667], [1.59458214E12, 82.48333333333333], [1.59458244E12, 383.25], [1.59458274E12, 161.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59458238E12, 0.016666666666666666], [1.59458268E12, 0.016666666666666666], [1.5945825E12, 0.016666666666666666], [1.59458232E12, 0.06666666666666667], [1.59458214E12, 0.016666666666666666], [1.59458244E12, 0.016666666666666666], [1.59458226E12, 0.016666666666666666], [1.59458256E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59458208E12, "maxY": 367.8666666666667, "series": [{"data": [[1.59458238E12, 318.98333333333335], [1.59458268E12, 137.56666666666666], [1.59458298E12, 283.26666666666665], [1.59458232E12, 310.75], [1.59458262E12, 136.9], [1.59458292E12, 367.8666666666667], [1.59458226E12, 246.26666666666668], [1.59458256E12, 205.26666666666668], [1.59458208E12, 1.75], [1.59458286E12, 226.1], [1.5945822E12, 187.95], [1.5945825E12, 314.78333333333336], [1.5945828E12, 121.36666666666666], [1.59458214E12, 50.516666666666666], [1.59458244E12, 357.18333333333334], [1.59458274E12, 98.28333333333333]], "isOverall": false, "label": "HTTP Request GET random product by id-success", "isController": false}, {"data": [[1.59458214E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request GET random product by id-failure", "isController": false}, {"data": [[1.59458238E12, 0.016666666666666666], [1.59458268E12, 0.016666666666666666], [1.5945825E12, 0.016666666666666666], [1.59458232E12, 0.06666666666666667], [1.59458244E12, 0.016666666666666666], [1.59458226E12, 0.016666666666666666], [1.59458256E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request GET product list-failure", "isController": false}, {"data": [[1.59458238E12, 25.85], [1.59458268E12, 50.3], [1.59458298E12, 42.65], [1.59458232E12, 23.633333333333333], [1.59458262E12, 46.93333333333333], [1.59458292E12, 44.766666666666666], [1.59458226E12, 24.95], [1.59458256E12, 41.61666666666667], [1.59458208E12, 3.25], [1.59458286E12, 54.416666666666664], [1.5945822E12, 29.133333333333333], [1.5945825E12, 28.0], [1.5945828E12, 65.25], [1.59458214E12, 31.966666666666665], [1.59458244E12, 26.066666666666666], [1.59458274E12, 62.81666666666667]], "isOverall": false, "label": "HTTP Request GET product list-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59458208E12, "maxY": 412.6333333333333, "series": [{"data": [[1.59458238E12, 344.8333333333333], [1.59458268E12, 187.86666666666667], [1.59458298E12, 325.9166666666667], [1.59458232E12, 334.3833333333333], [1.59458262E12, 183.83333333333334], [1.59458292E12, 412.6333333333333], [1.59458226E12, 271.21666666666664], [1.59458256E12, 246.88333333333333], [1.59458208E12, 5.0], [1.59458286E12, 280.51666666666665], [1.5945822E12, 217.08333333333334], [1.5945825E12, 342.78333333333336], [1.5945828E12, 186.61666666666667], [1.59458214E12, 82.48333333333333], [1.59458244E12, 383.25], [1.59458274E12, 161.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59458238E12, 0.016666666666666666], [1.59458268E12, 0.016666666666666666], [1.5945825E12, 0.016666666666666666], [1.59458232E12, 0.06666666666666667], [1.59458214E12, 0.016666666666666666], [1.59458244E12, 0.016666666666666666], [1.59458226E12, 0.016666666666666666], [1.59458256E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

