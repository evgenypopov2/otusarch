/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 32881.0, "series": [{"data": [[0.0, 7.0], [0.1, 11.0], [0.2, 12.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 15.0], [0.7, 16.0], [0.8, 17.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 20.0], [1.3, 21.0], [1.4, 22.0], [1.5, 23.0], [1.6, 23.0], [1.7, 24.0], [1.8, 25.0], [1.9, 26.0], [2.0, 26.0], [2.1, 27.0], [2.2, 28.0], [2.3, 29.0], [2.4, 30.0], [2.5, 31.0], [2.6, 32.0], [2.7, 33.0], [2.8, 34.0], [2.9, 36.0], [3.0, 37.0], [3.1, 38.0], [3.2, 39.0], [3.3, 41.0], [3.4, 42.0], [3.5, 44.0], [3.6, 46.0], [3.7, 49.0], [3.8, 53.0], [3.9, 56.0], [4.0, 60.0], [4.1, 62.0], [4.2, 64.0], [4.3, 66.0], [4.4, 67.0], [4.5, 68.0], [4.6, 70.0], [4.7, 71.0], [4.8, 72.0], [4.9, 73.0], [5.0, 74.0], [5.1, 75.0], [5.2, 76.0], [5.3, 76.0], [5.4, 77.0], [5.5, 78.0], [5.6, 79.0], [5.7, 80.0], [5.8, 80.0], [5.9, 81.0], [6.0, 82.0], [6.1, 82.0], [6.2, 83.0], [6.3, 84.0], [6.4, 85.0], [6.5, 85.0], [6.6, 86.0], [6.7, 87.0], [6.8, 87.0], [6.9, 88.0], [7.0, 89.0], [7.1, 89.0], [7.2, 90.0], [7.3, 91.0], [7.4, 91.0], [7.5, 92.0], [7.6, 93.0], [7.7, 93.0], [7.8, 94.0], [7.9, 95.0], [8.0, 95.0], [8.1, 96.0], [8.2, 96.0], [8.3, 97.0], [8.4, 98.0], [8.5, 98.0], [8.6, 99.0], [8.7, 99.0], [8.8, 100.0], [8.9, 100.0], [9.0, 101.0], [9.1, 102.0], [9.2, 102.0], [9.3, 103.0], [9.4, 103.0], [9.5, 104.0], [9.6, 104.0], [9.7, 105.0], [9.8, 106.0], [9.9, 106.0], [10.0, 107.0], [10.1, 108.0], [10.2, 109.0], [10.3, 109.0], [10.4, 110.0], [10.5, 111.0], [10.6, 111.0], [10.7, 112.0], [10.8, 113.0], [10.9, 114.0], [11.0, 115.0], [11.1, 115.0], [11.2, 116.0], [11.3, 117.0], [11.4, 118.0], [11.5, 119.0], [11.6, 120.0], [11.7, 121.0], [11.8, 122.0], [11.9, 123.0], [12.0, 124.0], [12.1, 126.0], [12.2, 127.0], [12.3, 128.0], [12.4, 130.0], [12.5, 131.0], [12.6, 132.0], [12.7, 134.0], [12.8, 136.0], [12.9, 138.0], [13.0, 140.0], [13.1, 142.0], [13.2, 144.0], [13.3, 147.0], [13.4, 150.0], [13.5, 153.0], [13.6, 155.0], [13.7, 157.0], [13.8, 159.0], [13.9, 161.0], [14.0, 163.0], [14.1, 165.0], [14.2, 166.0], [14.3, 168.0], [14.4, 170.0], [14.5, 171.0], [14.6, 172.0], [14.7, 173.0], [14.8, 175.0], [14.9, 176.0], [15.0, 177.0], [15.1, 178.0], [15.2, 179.0], [15.3, 180.0], [15.4, 181.0], [15.5, 182.0], [15.6, 183.0], [15.7, 185.0], [15.8, 186.0], [15.9, 187.0], [16.0, 188.0], [16.1, 188.0], [16.2, 189.0], [16.3, 190.0], [16.4, 191.0], [16.5, 192.0], [16.6, 193.0], [16.7, 194.0], [16.8, 195.0], [16.9, 196.0], [17.0, 197.0], [17.1, 198.0], [17.2, 198.0], [17.3, 199.0], [17.4, 200.0], [17.5, 201.0], [17.6, 202.0], [17.7, 202.0], [17.8, 203.0], [17.9, 204.0], [18.0, 205.0], [18.1, 206.0], [18.2, 207.0], [18.3, 208.0], [18.4, 209.0], [18.5, 210.0], [18.6, 211.0], [18.7, 212.0], [18.8, 213.0], [18.9, 214.0], [19.0, 215.0], [19.1, 216.0], [19.2, 217.0], [19.3, 219.0], [19.4, 220.0], [19.5, 221.0], [19.6, 222.0], [19.7, 224.0], [19.8, 226.0], [19.9, 228.0], [20.0, 229.0], [20.1, 231.0], [20.2, 233.0], [20.3, 234.0], [20.4, 237.0], [20.5, 239.0], [20.6, 242.0], [20.7, 245.0], [20.8, 249.0], [20.9, 253.0], [21.0, 256.0], [21.1, 259.0], [21.2, 261.0], [21.3, 264.0], [21.4, 267.0], [21.5, 269.0], [21.6, 270.0], [21.7, 272.0], [21.8, 274.0], [21.9, 276.0], [22.0, 277.0], [22.1, 279.0], [22.2, 281.0], [22.3, 282.0], [22.4, 284.0], [22.5, 285.0], [22.6, 286.0], [22.7, 288.0], [22.8, 289.0], [22.9, 290.0], [23.0, 292.0], [23.1, 293.0], [23.2, 294.0], [23.3, 295.0], [23.4, 297.0], [23.5, 298.0], [23.6, 299.0], [23.7, 300.0], [23.8, 301.0], [23.9, 302.0], [24.0, 303.0], [24.1, 304.0], [24.2, 306.0], [24.3, 307.0], [24.4, 308.0], [24.5, 310.0], [24.6, 311.0], [24.7, 312.0], [24.8, 314.0], [24.9, 315.0], [25.0, 317.0], [25.1, 318.0], [25.2, 320.0], [25.3, 322.0], [25.4, 324.0], [25.5, 326.0], [25.6, 329.0], [25.7, 332.0], [25.8, 334.0], [25.9, 338.0], [26.0, 341.0], [26.1, 345.0], [26.2, 350.0], [26.3, 355.0], [26.4, 359.0], [26.5, 363.0], [26.6, 365.0], [26.7, 368.0], [26.8, 371.0], [26.9, 373.0], [27.0, 376.0], [27.1, 378.0], [27.2, 380.0], [27.3, 382.0], [27.4, 384.0], [27.5, 386.0], [27.6, 387.0], [27.7, 389.0], [27.8, 391.0], [27.9, 392.0], [28.0, 394.0], [28.1, 395.0], [28.2, 397.0], [28.3, 398.0], [28.4, 399.0], [28.5, 401.0], [28.6, 402.0], [28.7, 404.0], [28.8, 405.0], [28.9, 407.0], [29.0, 409.0], [29.1, 411.0], [29.2, 413.0], [29.3, 414.0], [29.4, 416.0], [29.5, 419.0], [29.6, 421.0], [29.7, 423.0], [29.8, 426.0], [29.9, 429.0], [30.0, 433.0], [30.1, 436.0], [30.2, 442.0], [30.3, 447.0], [30.4, 452.0], [30.5, 457.0], [30.6, 462.0], [30.7, 466.0], [30.8, 469.0], [30.9, 472.0], [31.0, 475.0], [31.1, 478.0], [31.2, 481.0], [31.3, 483.0], [31.4, 486.0], [31.5, 488.0], [31.6, 491.0], [31.7, 493.0], [31.8, 495.0], [31.9, 497.0], [32.0, 499.0], [32.1, 501.0], [32.2, 503.0], [32.3, 504.0], [32.4, 507.0], [32.5, 509.0], [32.6, 511.0], [32.7, 514.0], [32.8, 517.0], [32.9, 520.0], [33.0, 524.0], [33.1, 528.0], [33.2, 532.0], [33.3, 537.0], [33.4, 542.0], [33.5, 550.0], [33.6, 557.0], [33.7, 563.0], [33.8, 567.0], [33.9, 572.0], [34.0, 575.0], [34.1, 579.0], [34.2, 583.0], [34.3, 586.0], [34.4, 590.0], [34.5, 592.0], [34.6, 595.0], [34.7, 598.0], [34.8, 600.0], [34.9, 603.0], [35.0, 606.0], [35.1, 609.0], [35.2, 612.0], [35.3, 615.0], [35.4, 619.0], [35.5, 624.0], [35.6, 629.0], [35.7, 636.0], [35.8, 644.0], [35.9, 654.0], [36.0, 662.0], [36.1, 668.0], [36.2, 674.0], [36.3, 680.0], [36.4, 684.0], [36.5, 689.0], [36.6, 693.0], [36.7, 697.0], [36.8, 701.0], [36.9, 705.0], [37.0, 709.0], [37.1, 714.0], [37.2, 720.0], [37.3, 726.0], [37.4, 732.0], [37.5, 741.0], [37.6, 756.0], [37.7, 766.0], [37.8, 775.0], [37.9, 782.0], [38.0, 788.0], [38.1, 792.0], [38.2, 798.0], [38.3, 803.0], [38.4, 808.0], [38.5, 815.0], [38.6, 822.0], [38.7, 832.0], [38.8, 845.0], [38.9, 862.0], [39.0, 871.0], [39.1, 880.0], [39.2, 888.0], [39.3, 894.0], [39.4, 900.0], [39.5, 906.0], [39.6, 913.0], [39.7, 920.0], [39.8, 931.0], [39.9, 946.0], [40.0, 963.0], [40.1, 975.0], [40.2, 985.0], [40.3, 993.0], [40.4, 1000.0], [40.5, 1007.0], [40.6, 1017.0], [40.7, 1030.0], [40.8, 1050.0], [40.9, 1070.0], [41.0, 1083.0], [41.1, 1092.0], [41.2, 1100.0], [41.3, 1109.0], [41.4, 1120.0], [41.5, 1133.0], [41.6, 1159.0], [41.7, 1177.0], [41.8, 1190.0], [41.9, 1198.0], [42.0, 1206.0], [42.1, 1219.0], [42.2, 1233.0], [42.3, 1261.0], [42.4, 1277.0], [42.5, 1290.0], [42.6, 1298.0], [42.7, 1307.0], [42.8, 1320.0], [42.9, 1337.0], [43.0, 1363.0], [43.1, 1383.0], [43.2, 1395.0], [43.3, 1406.0], [43.4, 1417.0], [43.5, 1440.0], [43.6, 1469.0], [43.7, 1485.0], [43.8, 1499.0], [43.9, 1509.0], [44.0, 1525.0], [44.1, 1562.0], [44.2, 1585.0], [44.3, 1601.0], [44.4, 1618.0], [44.5, 1647.0], [44.6, 1677.0], [44.7, 1693.0], [44.8, 1707.0], [44.9, 1724.0], [45.0, 1753.0], [45.1, 1778.0], [45.2, 1796.0], [45.3, 1810.0], [45.4, 1831.0], [45.5, 1867.0], [45.6, 1889.0], [45.7, 1902.0], [45.8, 1918.0], [45.9, 1948.0], [46.0, 1979.0], [46.1, 1996.0], [46.2, 2007.0], [46.3, 2024.0], [46.4, 2054.0], [46.5, 2081.0], [46.6, 2094.0], [46.7, 2106.0], [46.8, 2122.0], [46.9, 2152.0], [47.0, 2178.0], [47.1, 2194.0], [47.2, 2205.0], [47.3, 2220.0], [47.4, 2240.0], [47.5, 2272.0], [47.6, 2287.0], [47.7, 2297.0], [47.8, 2309.0], [47.9, 2327.0], [48.0, 2361.0], [48.1, 2380.0], [48.2, 2395.0], [48.3, 2406.0], [48.4, 2422.0], [48.5, 2450.0], [48.6, 2478.0], [48.7, 2492.0], [48.8, 2502.0], [48.9, 2517.0], [49.0, 2533.0], [49.1, 2562.0], [49.2, 2584.0], [49.3, 2595.0], [49.4, 2609.0], [49.5, 2626.0], [49.6, 2658.0], [49.7, 2679.0], [49.8, 2697.0], [49.9, 2713.0], [50.0, 2740.0], [50.1, 2769.0], [50.2, 2790.0], [50.3, 2805.0], [50.4, 2826.0], [50.5, 2867.0], [50.6, 2885.0], [50.7, 2900.0], [50.8, 2923.0], [50.9, 2965.0], [51.0, 2991.0], [51.1, 3007.0], [51.2, 3032.0], [51.3, 3072.0], [51.4, 3092.0], [51.5, 3112.0], [51.6, 3146.0], [51.7, 3183.0], [51.8, 3202.0], [51.9, 3220.0], [52.0, 3266.0], [52.1, 3291.0], [52.2, 3312.0], [52.3, 3347.0], [52.4, 3383.0], [52.5, 3407.0], [52.6, 3433.0], [52.7, 3479.0], [52.8, 3500.0], [52.9, 3524.0], [53.0, 3564.0], [53.1, 3592.0], [53.2, 3611.0], [53.3, 3653.0], [53.4, 3687.0], [53.5, 3713.0], [53.6, 3758.0], [53.7, 3793.0], [53.8, 3816.0], [53.9, 3865.0], [54.0, 3895.0], [54.1, 3921.0], [54.2, 3972.0], [54.3, 4001.0], [54.4, 4036.0], [54.5, 4085.0], [54.6, 4113.0], [54.7, 4160.0], [54.8, 4196.0], [54.9, 4228.0], [55.0, 4276.0], [55.1, 4303.0], [55.2, 4341.0], [55.3, 4386.0], [55.4, 4412.0], [55.5, 4446.0], [55.6, 4485.0], [55.7, 4509.0], [55.8, 4547.0], [55.9, 4579.0], [56.0, 4603.0], [56.1, 4629.0], [56.2, 4675.0], [56.3, 4699.0], [56.4, 4727.0], [56.5, 4766.0], [56.6, 4793.0], [56.7, 4808.0], [56.8, 4833.0], [56.9, 4874.0], [57.0, 4896.0], [57.1, 4912.0], [57.2, 4939.0], [57.3, 4976.0], [57.4, 4996.0], [57.5, 5011.0], [57.6, 5031.0], [57.7, 5064.0], [57.8, 5083.0], [57.9, 5098.0], [58.0, 5111.0], [58.1, 5130.0], [58.2, 5161.0], [58.3, 5180.0], [58.4, 5193.0], [58.5, 5204.0], [58.6, 5218.0], [58.7, 5240.0], [58.8, 5268.0], [58.9, 5284.0], [59.0, 5297.0], [59.1, 5307.0], [59.2, 5318.0], [59.3, 5334.0], [59.4, 5358.0], [59.5, 5375.0], [59.6, 5386.0], [59.7, 5396.0], [59.8, 5403.0], [59.9, 5414.0], [60.0, 5427.0], [60.1, 5446.0], [60.2, 5467.0], [60.3, 5483.0], [60.4, 5494.0], [60.5, 5501.0], [60.6, 5509.0], [60.7, 5520.0], [60.8, 5532.0], [60.9, 5556.0], [61.0, 5576.0], [61.1, 5586.0], [61.2, 5596.0], [61.3, 5603.0], [61.4, 5612.0], [61.5, 5624.0], [61.6, 5637.0], [61.7, 5660.0], [61.8, 5673.0], [61.9, 5685.0], [62.0, 5694.0], [62.1, 5701.0], [62.2, 5711.0], [62.3, 5720.0], [62.4, 5734.0], [62.5, 5754.0], [62.6, 5771.0], [62.7, 5782.0], [62.8, 5791.0], [62.9, 5798.0], [63.0, 5806.0], [63.1, 5816.0], [63.2, 5831.0], [63.3, 5852.0], [63.4, 5870.0], [63.5, 5881.0], [63.6, 5891.0], [63.7, 5899.0], [63.8, 5906.0], [63.9, 5918.0], [64.0, 5932.0], [64.1, 5954.0], [64.2, 5971.0], [64.3, 5984.0], [64.4, 5995.0], [64.5, 6005.0], [64.6, 6015.0], [64.7, 6027.0], [64.8, 6051.0], [64.9, 6073.0], [65.0, 6087.0], [65.1, 6097.0], [65.2, 6107.0], [65.3, 6119.0], [65.4, 6139.0], [65.5, 6168.0], [65.6, 6185.0], [65.7, 6196.0], [65.8, 6204.0], [65.9, 6219.0], [66.0, 6240.0], [66.1, 6269.0], [66.2, 6285.0], [66.3, 6298.0], [66.4, 6307.0], [66.5, 6320.0], [66.6, 6338.0], [66.7, 6366.0], [66.8, 6383.0], [66.9, 6396.0], [67.0, 6408.0], [67.1, 6421.0], [67.2, 6444.0], [67.3, 6472.0], [67.4, 6488.0], [67.5, 6499.0], [67.6, 6510.0], [67.7, 6526.0], [67.8, 6554.0], [67.9, 6577.0], [68.0, 6594.0], [68.1, 6604.0], [68.2, 6615.0], [68.3, 6633.0], [68.4, 6664.0], [68.5, 6680.0], [68.6, 6693.0], [68.7, 6705.0], [68.8, 6720.0], [68.9, 6745.0], [69.0, 6770.0], [69.1, 6787.0], [69.2, 6799.0], [69.3, 6809.0], [69.4, 6823.0], [69.5, 6837.0], [69.6, 6861.0], [69.7, 6877.0], [69.8, 6890.0], [69.9, 6900.0], [70.0, 6911.0], [70.1, 6926.0], [70.2, 6949.0], [70.3, 6972.0], [70.4, 6989.0], [70.5, 6999.0], [70.6, 7010.0], [70.7, 7023.0], [70.8, 7043.0], [70.9, 7069.0], [71.0, 7083.0], [71.1, 7095.0], [71.2, 7104.0], [71.3, 7115.0], [71.4, 7129.0], [71.5, 7149.0], [71.6, 7174.0], [71.7, 7187.0], [71.8, 7199.0], [71.9, 7207.0], [72.0, 7216.0], [72.1, 7228.0], [72.2, 7250.0], [72.3, 7269.0], [72.4, 7283.0], [72.5, 7291.0], [72.6, 7299.0], [72.7, 7308.0], [72.8, 7317.0], [72.9, 7329.0], [73.0, 7351.0], [73.1, 7371.0], [73.2, 7382.0], [73.3, 7392.0], [73.4, 7399.0], [73.5, 7407.0], [73.6, 7416.0], [73.7, 7430.0], [73.8, 7444.0], [73.9, 7465.0], [74.0, 7479.0], [74.1, 7488.0], [74.2, 7497.0], [74.3, 7503.0], [74.4, 7510.0], [74.5, 7520.0], [74.6, 7535.0], [74.7, 7558.0], [74.8, 7574.0], [74.9, 7584.0], [75.0, 7593.0], [75.1, 7600.0], [75.2, 7607.0], [75.3, 7616.0], [75.4, 7630.0], [75.5, 7652.0], [75.6, 7668.0], [75.7, 7681.0], [75.8, 7690.0], [75.9, 7698.0], [76.0, 7705.0], [76.1, 7714.0], [76.2, 7726.0], [76.3, 7740.0], [76.4, 7761.0], [76.5, 7774.0], [76.6, 7786.0], [76.7, 7797.0], [76.8, 7806.0], [76.9, 7814.0], [77.0, 7830.0], [77.1, 7851.0], [77.2, 7871.0], [77.3, 7883.0], [77.4, 7892.0], [77.5, 7901.0], [77.6, 7909.0], [77.7, 7917.0], [77.8, 7933.0], [77.9, 7953.0], [78.0, 7971.0], [78.1, 7985.0], [78.2, 7993.0], [78.3, 8001.0], [78.4, 8009.0], [78.5, 8019.0], [78.6, 8034.0], [78.7, 8057.0], [78.8, 8075.0], [78.9, 8088.0], [79.0, 8098.0], [79.1, 8106.0], [79.2, 8117.0], [79.3, 8129.0], [79.4, 8154.0], [79.5, 8172.0], [79.6, 8185.0], [79.7, 8196.0], [79.8, 8204.0], [79.9, 8216.0], [80.0, 8229.0], [80.1, 8246.0], [80.2, 8269.0], [80.3, 8283.0], [80.4, 8293.0], [80.5, 8302.0], [80.6, 8312.0], [80.7, 8322.0], [80.8, 8338.0], [80.9, 8359.0], [81.0, 8374.0], [81.1, 8388.0], [81.2, 8398.0], [81.3, 8408.0], [81.4, 8417.0], [81.5, 8429.0], [81.6, 8453.0], [81.7, 8475.0], [81.8, 8486.0], [81.9, 8497.0], [82.0, 8507.0], [82.1, 8517.0], [82.2, 8532.0], [82.3, 8556.0], [82.4, 8576.0], [82.5, 8588.0], [82.6, 8599.0], [82.7, 8607.0], [82.8, 8621.0], [82.9, 8639.0], [83.0, 8668.0], [83.1, 8682.0], [83.2, 8694.0], [83.3, 8703.0], [83.4, 8711.0], [83.5, 8727.0], [83.6, 8751.0], [83.7, 8772.0], [83.8, 8787.0], [83.9, 8797.0], [84.0, 8806.0], [84.1, 8816.0], [84.2, 8832.0], [84.3, 8859.0], [84.4, 8877.0], [84.5, 8888.0], [84.6, 8899.0], [84.7, 8911.0], [84.8, 8924.0], [84.9, 8949.0], [85.0, 8975.0], [85.1, 8990.0], [85.2, 9000.0], [85.3, 9010.0], [85.4, 9023.0], [85.5, 9047.0], [85.6, 9075.0], [85.7, 9089.0], [85.8, 9098.0], [85.9, 9110.0], [86.0, 9124.0], [86.1, 9143.0], [86.2, 9171.0], [86.3, 9188.0], [86.4, 9199.0], [86.5, 9209.0], [86.6, 9223.0], [86.7, 9246.0], [86.8, 9271.0], [86.9, 9290.0], [87.0, 9300.0], [87.1, 9313.0], [87.2, 9332.0], [87.3, 9362.0], [87.4, 9381.0], [87.5, 9394.0], [87.6, 9405.0], [87.7, 9421.0], [87.8, 9447.0], [87.9, 9472.0], [88.0, 9486.0], [88.1, 9500.0], [88.2, 9512.0], [88.3, 9527.0], [88.4, 9559.0], [88.5, 9579.0], [88.6, 9594.0], [88.7, 9604.0], [88.8, 9620.0], [88.9, 9649.0], [89.0, 9678.0], [89.1, 9692.0], [89.2, 9705.0], [89.3, 9718.0], [89.4, 9741.0], [89.5, 9774.0], [89.6, 9789.0], [89.7, 9800.0], [89.8, 9812.0], [89.9, 9832.0], [90.0, 9864.0], [90.1, 9885.0], [90.2, 9902.0], [90.3, 9915.0], [90.4, 9941.0], [90.5, 9973.0], [90.6, 9990.0], [90.7, 10003.0], [90.8, 10020.0], [90.9, 10049.0], [91.0, 10078.0], [91.1, 10099.0], [91.2, 10115.0], [91.3, 10141.0], [91.4, 10180.0], [91.5, 10199.0], [91.6, 10216.0], [91.7, 10254.0], [91.8, 10283.0], [91.9, 10304.0], [92.0, 10326.0], [92.1, 10367.0], [92.2, 10395.0], [92.3, 10414.0], [92.4, 10469.0], [92.5, 10494.0], [92.6, 10519.0], [92.7, 10571.0], [92.8, 10600.0], [92.9, 10638.0], [93.0, 10688.0], [93.1, 10713.0], [93.2, 10766.0], [93.3, 10803.0], [93.4, 10845.0], [93.5, 10895.0], [93.6, 10938.0], [93.7, 10996.0], [93.8, 11031.0], [93.9, 11093.0], [94.0, 11134.0], [94.1, 11194.0], [94.2, 11227.0], [94.3, 11290.0], [94.4, 11328.0], [94.5, 11396.0], [94.6, 11452.0], [94.7, 11511.0], [94.8, 11578.0], [94.9, 11624.0], [95.0, 11690.0], [95.1, 11732.0], [95.2, 11797.0], [95.3, 11863.0], [95.4, 11902.0], [95.5, 11949.0], [95.6, 12001.0], [95.7, 12060.0], [95.8, 12105.0], [95.9, 12168.0], [96.0, 12209.0], [96.1, 12276.0], [96.2, 12331.0], [96.3, 12391.0], [96.4, 12459.0], [96.5, 12515.0], [96.6, 12593.0], [96.7, 12670.0], [96.8, 12750.0], [96.9, 12815.0], [97.0, 12900.0], [97.1, 12989.0], [97.2, 13065.0], [97.3, 13155.0], [97.4, 13217.0], [97.5, 13313.0], [97.6, 13402.0], [97.7, 13490.0], [97.8, 13600.0], [97.9, 13696.0], [98.0, 13795.0], [98.1, 13894.0], [98.2, 13999.0], [98.3, 14141.0], [98.4, 14272.0], [98.5, 14391.0], [98.6, 14509.0], [98.7, 14624.0], [98.8, 14775.0], [98.9, 14929.0], [99.0, 15106.0], [99.1, 15319.0], [99.2, 15587.0], [99.3, 15888.0], [99.4, 16206.0], [99.5, 16773.0], [99.6, 17417.0], [99.7, 17882.0], [99.8, 18714.0], [99.9, 20140.0]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 9.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 9.0], [5.8, 9.0], [5.9, 9.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 14.0], [8.6, 14.0], [8.7, 14.0], [8.8, 14.0], [8.9, 14.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 16.0], [9.5, 16.0], [9.6, 16.0], [9.7, 16.0], [9.8, 17.0], [9.9, 17.0], [10.0, 17.0], [10.1, 17.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 19.0], [10.6, 19.0], [10.7, 19.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 21.0], [11.3, 21.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 23.0], [11.8, 23.0], [11.9, 24.0], [12.0, 24.0], [12.1, 25.0], [12.2, 25.0], [12.3, 26.0], [12.4, 26.0], [12.5, 27.0], [12.6, 27.0], [12.7, 28.0], [12.8, 29.0], [12.9, 29.0], [13.0, 30.0], [13.1, 31.0], [13.2, 31.0], [13.3, 32.0], [13.4, 33.0], [13.5, 34.0], [13.6, 34.0], [13.7, 35.0], [13.8, 36.0], [13.9, 38.0], [14.0, 39.0], [14.1, 40.0], [14.2, 42.0], [14.3, 43.0], [14.4, 45.0], [14.5, 47.0], [14.6, 49.0], [14.7, 50.0], [14.8, 51.0], [14.9, 53.0], [15.0, 54.0], [15.1, 55.0], [15.2, 56.0], [15.3, 57.0], [15.4, 57.0], [15.5, 58.0], [15.6, 59.0], [15.7, 60.0], [15.8, 60.0], [15.9, 61.0], [16.0, 61.0], [16.1, 62.0], [16.2, 63.0], [16.3, 63.0], [16.4, 64.0], [16.5, 64.0], [16.6, 65.0], [16.7, 65.0], [16.8, 66.0], [16.9, 67.0], [17.0, 67.0], [17.1, 68.0], [17.2, 68.0], [17.3, 69.0], [17.4, 69.0], [17.5, 70.0], [17.6, 70.0], [17.7, 71.0], [17.8, 71.0], [17.9, 72.0], [18.0, 73.0], [18.1, 73.0], [18.2, 74.0], [18.3, 74.0], [18.4, 75.0], [18.5, 75.0], [18.6, 76.0], [18.7, 76.0], [18.8, 77.0], [18.9, 77.0], [19.0, 78.0], [19.1, 78.0], [19.2, 79.0], [19.3, 79.0], [19.4, 80.0], [19.5, 80.0], [19.6, 81.0], [19.7, 81.0], [19.8, 82.0], [19.9, 82.0], [20.0, 83.0], [20.1, 83.0], [20.2, 84.0], [20.3, 84.0], [20.4, 85.0], [20.5, 85.0], [20.6, 86.0], [20.7, 86.0], [20.8, 87.0], [20.9, 87.0], [21.0, 88.0], [21.1, 89.0], [21.2, 89.0], [21.3, 90.0], [21.4, 90.0], [21.5, 91.0], [21.6, 91.0], [21.7, 92.0], [21.8, 92.0], [21.9, 93.0], [22.0, 93.0], [22.1, 94.0], [22.2, 94.0], [22.3, 95.0], [22.4, 95.0], [22.5, 96.0], [22.6, 96.0], [22.7, 97.0], [22.8, 97.0], [22.9, 98.0], [23.0, 99.0], [23.1, 99.0], [23.2, 100.0], [23.3, 100.0], [23.4, 101.0], [23.5, 101.0], [23.6, 102.0], [23.7, 102.0], [23.8, 103.0], [23.9, 103.0], [24.0, 104.0], [24.1, 105.0], [24.2, 105.0], [24.3, 106.0], [24.4, 106.0], [24.5, 107.0], [24.6, 108.0], [24.7, 108.0], [24.8, 109.0], [24.9, 110.0], [25.0, 111.0], [25.1, 112.0], [25.2, 112.0], [25.3, 113.0], [25.4, 114.0], [25.5, 115.0], [25.6, 116.0], [25.7, 117.0], [25.8, 118.0], [25.9, 119.0], [26.0, 120.0], [26.1, 121.0], [26.2, 122.0], [26.3, 124.0], [26.4, 125.0], [26.5, 127.0], [26.6, 128.0], [26.7, 130.0], [26.8, 131.0], [26.9, 133.0], [27.0, 136.0], [27.1, 139.0], [27.2, 142.0], [27.3, 147.0], [27.4, 151.0], [27.5, 155.0], [27.6, 158.0], [27.7, 161.0], [27.8, 163.0], [27.9, 165.0], [28.0, 167.0], [28.1, 169.0], [28.2, 171.0], [28.3, 173.0], [28.4, 174.0], [28.5, 176.0], [28.6, 177.0], [28.7, 179.0], [28.8, 180.0], [28.9, 182.0], [29.0, 183.0], [29.1, 184.0], [29.2, 185.0], [29.3, 186.0], [29.4, 188.0], [29.5, 189.0], [29.6, 190.0], [29.7, 192.0], [29.8, 193.0], [29.9, 194.0], [30.0, 195.0], [30.1, 196.0], [30.2, 197.0], [30.3, 199.0], [30.4, 200.0], [30.5, 201.0], [30.6, 202.0], [30.7, 203.0], [30.8, 205.0], [30.9, 206.0], [31.0, 207.0], [31.1, 209.0], [31.2, 211.0], [31.3, 212.0], [31.4, 214.0], [31.5, 216.0], [31.6, 218.0], [31.7, 220.0], [31.8, 222.0], [31.9, 225.0], [32.0, 228.0], [32.1, 232.0], [32.2, 237.0], [32.3, 242.0], [32.4, 250.0], [32.5, 257.0], [32.6, 263.0], [32.7, 267.0], [32.8, 271.0], [32.9, 274.0], [33.0, 277.0], [33.1, 279.0], [33.2, 282.0], [33.3, 285.0], [33.4, 288.0], [33.5, 291.0], [33.6, 293.0], [33.7, 295.0], [33.8, 298.0], [33.9, 300.0], [34.0, 303.0], [34.1, 306.0], [34.2, 308.0], [34.3, 311.0], [34.4, 314.0], [34.5, 317.0], [34.6, 322.0], [34.7, 327.0], [34.8, 334.0], [34.9, 344.0], [35.0, 357.0], [35.1, 365.0], [35.2, 371.0], [35.3, 376.0], [35.4, 381.0], [35.5, 385.0], [35.6, 389.0], [35.7, 392.0], [35.8, 397.0], [35.9, 400.0], [36.0, 404.0], [36.1, 407.0], [36.2, 412.0], [36.3, 416.0], [36.4, 423.0], [36.5, 432.0], [36.6, 446.0], [36.7, 463.0], [36.8, 472.0], [36.9, 479.0], [37.0, 485.0], [37.1, 491.0], [37.2, 496.0], [37.3, 502.0], [37.4, 507.0], [37.5, 515.0], [37.6, 527.0], [37.7, 548.0], [37.8, 569.0], [37.9, 580.0], [38.0, 588.0], [38.1, 595.0], [38.2, 604.0], [38.3, 614.0], [38.4, 627.0], [38.5, 658.0], [38.6, 678.0], [38.7, 693.0], [38.8, 706.0], [38.9, 721.0], [39.0, 748.0], [39.1, 778.0], [39.2, 793.0], [39.3, 804.0], [39.4, 816.0], [39.5, 832.0], [39.6, 865.0], [39.7, 884.0], [39.8, 894.0], [39.9, 905.0], [40.0, 918.0], [40.1, 941.0], [40.2, 975.0], [40.3, 988.0], [40.4, 998.0], [40.5, 1007.0], [40.6, 1017.0], [40.7, 1031.0], [40.8, 1067.0], [40.9, 1083.0], [41.0, 1095.0], [41.1, 1104.0], [41.2, 1115.0], [41.3, 1130.0], [41.4, 1164.0], [41.5, 1182.0], [41.6, 1194.0], [41.7, 1207.0], [41.8, 1221.0], [41.9, 1263.0], [42.0, 1284.0], [42.1, 1296.0], [42.2, 1307.0], [42.3, 1323.0], [42.4, 1363.0], [42.5, 1385.0], [42.6, 1400.0], [42.7, 1419.0], [42.8, 1457.0], [42.9, 1485.0], [43.0, 1501.0], [43.1, 1522.0], [43.2, 1570.0], [43.3, 1591.0], [43.4, 1605.0], [43.5, 1625.0], [43.6, 1669.0], [43.7, 1692.0], [43.8, 1706.0], [43.9, 1721.0], [44.0, 1763.0], [44.1, 1783.0], [44.2, 1797.0], [44.3, 1809.0], [44.4, 1824.0], [44.5, 1863.0], [44.6, 1883.0], [44.7, 1895.0], [44.8, 1905.0], [44.9, 1922.0], [45.0, 1951.0], [45.1, 1980.0], [45.2, 1995.0], [45.3, 2007.0], [45.4, 2019.0], [45.5, 2041.0], [45.6, 2078.0], [45.7, 2091.0], [45.8, 2101.0], [45.9, 2111.0], [46.0, 2126.0], [46.1, 2164.0], [46.2, 2181.0], [46.3, 2193.0], [46.4, 2203.0], [46.5, 2214.0], [46.6, 2229.0], [46.7, 2265.0], [46.8, 2286.0], [46.9, 2297.0], [47.0, 2306.0], [47.1, 2316.0], [47.2, 2334.0], [47.3, 2369.0], [47.4, 2384.0], [47.5, 2393.0], [47.6, 2407.0], [47.7, 2418.0], [47.8, 2439.0], [47.9, 2475.0], [48.0, 2490.0], [48.1, 2501.0], [48.2, 2511.0], [48.3, 2526.0], [48.4, 2566.0], [48.5, 2588.0], [48.6, 2599.0], [48.7, 2614.0], [48.8, 2640.0], [48.9, 2676.0], [49.0, 2695.0], [49.1, 2711.0], [49.2, 2745.0], [49.3, 2786.0], [49.4, 2806.0], [49.5, 2823.0], [49.6, 2866.0], [49.7, 2889.0], [49.8, 2906.0], [49.9, 2931.0], [50.0, 2980.0], [50.1, 3000.0], [50.2, 3020.0], [50.3, 3072.0], [50.4, 3106.0], [50.5, 3149.0], [50.6, 3191.0], [50.7, 3209.0], [50.8, 3270.0], [50.9, 3296.0], [51.0, 3322.0], [51.1, 3378.0], [51.2, 3400.0], [51.3, 3419.0], [51.4, 3469.0], [51.5, 3494.0], [51.6, 3522.0], [51.7, 3576.0], [51.8, 3599.0], [51.9, 3624.0], [52.0, 3678.0], [52.1, 3703.0], [52.2, 3742.0], [52.3, 3799.0], [52.4, 3835.0], [52.5, 3888.0], [52.6, 3914.0], [52.7, 3976.0], [52.8, 4005.0], [52.9, 4041.0], [53.0, 4091.0], [53.1, 4115.0], [53.2, 4171.0], [53.3, 4199.0], [53.4, 4224.0], [53.5, 4280.0], [53.6, 4301.0], [53.7, 4325.0], [53.8, 4375.0], [53.9, 4398.0], [54.0, 4416.0], [54.1, 4466.0], [54.2, 4493.0], [54.3, 4509.0], [54.4, 4539.0], [54.5, 4581.0], [54.6, 4595.0], [54.7, 4611.0], [54.8, 4635.0], [54.9, 4675.0], [55.0, 4691.0], [55.1, 4705.0], [55.2, 4719.0], [55.3, 4752.0], [55.4, 4782.0], [55.5, 4795.0], [55.6, 4809.0], [55.7, 4826.0], [55.8, 4865.0], [55.9, 4883.0], [56.0, 4894.0], [56.1, 4905.0], [56.2, 4917.0], [56.3, 4932.0], [56.4, 4967.0], [56.5, 4983.0], [56.6, 4994.0], [56.7, 5002.0], [56.8, 5011.0], [56.9, 5023.0], [57.0, 5037.0], [57.1, 5070.0], [57.2, 5084.0], [57.3, 5093.0], [57.4, 5100.0], [57.5, 5109.0], [57.6, 5119.0], [57.7, 5139.0], [57.8, 5166.0], [57.9, 5179.0], [58.0, 5188.0], [58.1, 5195.0], [58.2, 5202.0], [58.3, 5210.0], [58.4, 5220.0], [58.5, 5231.0], [58.6, 5257.0], [58.7, 5274.0], [58.8, 5284.0], [58.9, 5290.0], [59.0, 5299.0], [59.1, 5305.0], [59.2, 5312.0], [59.3, 5321.0], [59.4, 5332.0], [59.5, 5354.0], [59.6, 5372.0], [59.7, 5382.0], [59.8, 5390.0], [59.9, 5396.0], [60.0, 5403.0], [60.1, 5411.0], [60.2, 5418.0], [60.3, 5429.0], [60.4, 5447.0], [60.5, 5471.0], [60.6, 5480.0], [60.7, 5490.0], [60.8, 5499.0], [60.9, 5504.0], [61.0, 5514.0], [61.1, 5523.0], [61.2, 5542.0], [61.3, 5566.0], [61.4, 5577.0], [61.5, 5587.0], [61.6, 5596.0], [61.7, 5604.0], [61.8, 5612.0], [61.9, 5620.0], [62.0, 5635.0], [62.1, 5662.0], [62.2, 5676.0], [62.3, 5688.0], [62.4, 5695.0], [62.5, 5703.0], [62.6, 5710.0], [62.7, 5718.0], [62.8, 5734.0], [62.9, 5763.0], [63.0, 5777.0], [63.1, 5787.0], [63.2, 5795.0], [63.3, 5803.0], [63.4, 5813.0], [63.5, 5826.0], [63.6, 5844.0], [63.7, 5870.0], [63.8, 5881.0], [63.9, 5892.0], [64.0, 5900.0], [64.1, 5909.0], [64.2, 5920.0], [64.3, 5934.0], [64.4, 5960.0], [64.5, 5978.0], [64.6, 5989.0], [64.7, 6001.0], [64.8, 6011.0], [64.9, 6025.0], [65.0, 6056.0], [65.1, 6081.0], [65.2, 6091.0], [65.3, 6101.0], [65.4, 6115.0], [65.5, 6136.0], [65.6, 6172.0], [65.7, 6189.0], [65.8, 6200.0], [65.9, 6213.0], [66.0, 6233.0], [66.1, 6269.0], [66.2, 6286.0], [66.3, 6300.0], [66.4, 6314.0], [66.5, 6334.0], [66.6, 6370.0], [66.7, 6387.0], [66.8, 6401.0], [66.9, 6414.0], [67.0, 6432.0], [67.1, 6468.0], [67.2, 6485.0], [67.3, 6498.0], [67.4, 6511.0], [67.5, 6524.0], [67.6, 6554.0], [67.7, 6577.0], [67.8, 6591.0], [67.9, 6600.0], [68.0, 6611.0], [68.1, 6629.0], [68.2, 6668.0], [68.3, 6685.0], [68.4, 6695.0], [68.5, 6705.0], [68.6, 6717.0], [68.7, 6734.0], [68.8, 6767.0], [68.9, 6785.0], [69.0, 6796.0], [69.1, 6806.0], [69.2, 6816.0], [69.3, 6833.0], [69.4, 6867.0], [69.5, 6884.0], [69.6, 6895.0], [69.7, 6903.0], [69.8, 6913.0], [69.9, 6924.0], [70.0, 6943.0], [70.1, 6974.0], [70.2, 6986.0], [70.3, 6995.0], [70.4, 7002.0], [70.5, 7011.0], [70.6, 7021.0], [70.7, 7038.0], [70.8, 7067.0], [70.9, 7080.0], [71.0, 7089.0], [71.1, 7097.0], [71.2, 7105.0], [71.3, 7114.0], [71.4, 7126.0], [71.5, 7147.0], [71.6, 7172.0], [71.7, 7183.0], [71.8, 7192.0], [71.9, 7200.0], [72.0, 7210.0], [72.1, 7219.0], [72.2, 7228.0], [72.3, 7251.0], [72.4, 7271.0], [72.5, 7281.0], [72.6, 7290.0], [72.7, 7297.0], [72.8, 7304.0], [72.9, 7314.0], [73.0, 7323.0], [73.1, 7335.0], [73.2, 7361.0], [73.3, 7376.0], [73.4, 7386.0], [73.5, 7394.0], [73.6, 7400.0], [73.7, 7405.0], [73.8, 7412.0], [73.9, 7421.0], [74.0, 7431.0], [74.1, 7452.0], [74.2, 7470.0], [74.3, 7480.0], [74.4, 7487.0], [74.5, 7494.0], [74.6, 7501.0], [74.7, 7509.0], [74.8, 7517.0], [74.9, 7528.0], [75.0, 7551.0], [75.1, 7571.0], [75.2, 7582.0], [75.3, 7590.0], [75.4, 7598.0], [75.5, 7605.0], [75.6, 7614.0], [75.7, 7625.0], [75.8, 7638.0], [75.9, 7662.0], [76.0, 7676.0], [76.1, 7686.0], [76.2, 7694.0], [76.3, 7700.0], [76.4, 7706.0], [76.5, 7714.0], [76.6, 7721.0], [76.7, 7737.0], [76.8, 7764.0], [76.9, 7778.0], [77.0, 7787.0], [77.1, 7795.0], [77.2, 7802.0], [77.3, 7809.0], [77.4, 7818.0], [77.5, 7831.0], [77.6, 7859.0], [77.7, 7877.0], [77.8, 7887.0], [77.9, 7896.0], [78.0, 7903.0], [78.1, 7910.0], [78.2, 7922.0], [78.3, 7935.0], [78.4, 7961.0], [78.5, 7977.0], [78.6, 7986.0], [78.7, 7994.0], [78.8, 8002.0], [78.9, 8008.0], [79.0, 8016.0], [79.1, 8027.0], [79.2, 8042.0], [79.3, 8069.0], [79.4, 8080.0], [79.5, 8089.0], [79.6, 8097.0], [79.7, 8106.0], [79.8, 8116.0], [79.9, 8128.0], [80.0, 8146.0], [80.1, 8172.0], [80.2, 8185.0], [80.3, 8193.0], [80.4, 8201.0], [80.5, 8209.0], [80.6, 8219.0], [80.7, 8232.0], [80.8, 8261.0], [80.9, 8274.0], [81.0, 8286.0], [81.1, 8294.0], [81.2, 8303.0], [81.3, 8311.0], [81.4, 8321.0], [81.5, 8340.0], [81.6, 8370.0], [81.7, 8384.0], [81.8, 8394.0], [81.9, 8403.0], [82.0, 8411.0], [82.1, 8420.0], [82.2, 8437.0], [82.3, 8468.0], [82.4, 8481.0], [82.5, 8492.0], [82.6, 8502.0], [82.7, 8512.0], [82.8, 8523.0], [82.9, 8544.0], [83.0, 8574.0], [83.1, 8584.0], [83.2, 8594.0], [83.3, 8602.0], [83.4, 8611.0], [83.5, 8625.0], [83.6, 8654.0], [83.7, 8676.0], [83.8, 8688.0], [83.9, 8698.0], [84.0, 8707.0], [84.1, 8719.0], [84.2, 8734.0], [84.3, 8765.0], [84.4, 8784.0], [84.5, 8794.0], [84.6, 8805.0], [84.7, 8816.0], [84.8, 8830.0], [84.9, 8868.0], [85.0, 8885.0], [85.1, 8896.0], [85.2, 8905.0], [85.3, 8916.0], [85.4, 8934.0], [85.5, 8973.0], [85.6, 8986.0], [85.7, 8998.0], [85.8, 9007.0], [85.9, 9019.0], [86.0, 9034.0], [86.1, 9069.0], [86.2, 9080.0], [86.3, 9093.0], [86.4, 9101.0], [86.5, 9110.0], [86.6, 9120.0], [86.7, 9144.0], [86.8, 9173.0], [86.9, 9187.0], [87.0, 9198.0], [87.1, 9206.0], [87.2, 9220.0], [87.3, 9244.0], [87.4, 9275.0], [87.5, 9288.0], [87.6, 9297.0], [87.7, 9307.0], [87.8, 9320.0], [87.9, 9338.0], [88.0, 9371.0], [88.1, 9388.0], [88.2, 9398.0], [88.3, 9409.0], [88.4, 9421.0], [88.5, 9439.0], [88.6, 9473.0], [88.7, 9487.0], [88.8, 9497.0], [88.9, 9508.0], [89.0, 9521.0], [89.1, 9543.0], [89.2, 9578.0], [89.3, 9594.0], [89.4, 9604.0], [89.5, 9617.0], [89.6, 9640.0], [89.7, 9675.0], [89.8, 9691.0], [89.9, 9703.0], [90.0, 9716.0], [90.1, 9732.0], [90.2, 9769.0], [90.3, 9789.0], [90.4, 9801.0], [90.5, 9812.0], [90.6, 9833.0], [90.7, 9874.0], [90.8, 9894.0], [90.9, 9909.0], [91.0, 9932.0], [91.1, 9974.0], [91.2, 9996.0], [91.3, 10009.0], [91.4, 10033.0], [91.5, 10078.0], [91.6, 10099.0], [91.7, 10115.0], [91.8, 10170.0], [91.9, 10199.0], [92.0, 10220.0], [92.1, 10275.0], [92.2, 10299.0], [92.3, 10318.0], [92.4, 10366.0], [92.5, 10398.0], [92.6, 10417.0], [92.7, 10477.0], [92.8, 10507.0], [92.9, 10543.0], [93.0, 10595.0], [93.1, 10625.0], [93.2, 10693.0], [93.3, 10719.0], [93.4, 10783.0], [93.5, 10813.0], [93.6, 10870.0], [93.7, 10909.0], [93.8, 10974.0], [93.9, 11011.0], [94.0, 11077.0], [94.1, 11119.0], [94.2, 11184.0], [94.3, 11214.0], [94.4, 11278.0], [94.5, 11311.0], [94.6, 11381.0], [94.7, 11418.0], [94.8, 11483.0], [94.9, 11521.0], [95.0, 11580.0], [95.1, 11610.0], [95.2, 11664.0], [95.3, 11709.0], [95.4, 11767.0], [95.5, 11803.0], [95.6, 11847.0], [95.7, 11902.0], [95.8, 11941.0], [95.9, 11993.0], [96.0, 12036.0], [96.1, 12094.0], [96.2, 12127.0], [96.3, 12195.0], [96.4, 12249.0], [96.5, 12322.0], [96.6, 12404.0], [96.7, 12500.0], [96.8, 12574.0], [96.9, 12621.0], [97.0, 12700.0], [97.1, 12789.0], [97.2, 12861.0], [97.3, 12919.0], [97.4, 13003.0], [97.5, 13100.0], [97.6, 13194.0], [97.7, 13285.0], [97.8, 13371.0], [97.9, 13462.0], [98.0, 13555.0], [98.1, 13626.0], [98.2, 13719.0], [98.3, 13866.0], [98.4, 14012.0], [98.5, 14116.0], [98.6, 14215.0], [98.7, 14319.0], [98.8, 14476.0], [98.9, 14614.0], [99.0, 14803.0], [99.1, 14999.0], [99.2, 15199.0], [99.3, 15437.0], [99.4, 15827.0], [99.5, 16286.0], [99.6, 16963.0], [99.7, 17459.0], [99.8, 18267.0], [99.9, 19734.0], [100.0, 32881.0]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24492.0, "series": [{"data": [[0.0, 9137.0], [100.0, 8981.0], [200.0, 6628.0], [300.0, 4965.0], [400.0, 3795.0], [500.0, 2852.0], [600.0, 2096.0], [700.0, 1536.0], [800.0, 1212.0], [900.0, 1049.0], [1000.0, 838.0], [1100.0, 756.0], [1200.0, 727.0], [1300.0, 647.0], [1400.0, 602.0], [1500.0, 499.0], [1600.0, 476.0], [1700.0, 508.0], [1800.0, 471.0], [1900.0, 469.0], [2000.0, 531.0], [2100.0, 541.0], [2200.0, 593.0], [2300.0, 543.0], [2400.0, 564.0], [2500.0, 587.0], [2600.0, 496.0], [2700.0, 467.0], [2800.0, 452.0], [2900.0, 382.0], [3000.0, 401.0], [3100.0, 355.0], [3200.0, 386.0], [3300.0, 337.0], [3400.0, 337.0], [3500.0, 358.0], [3600.0, 330.0], [3700.0, 301.0], [3800.0, 293.0], [3900.0, 285.0], [4000.0, 267.0], [4100.0, 279.0], [4300.0, 284.0], [4200.0, 283.0], [4500.0, 332.0], [4400.0, 322.0], [4600.0, 338.0], [4700.0, 353.0], [4800.0, 393.0], [5000.0, 513.0], [5100.0, 569.0], [4900.0, 420.0], [5300.0, 732.0], [5200.0, 611.0], [5500.0, 802.0], [5600.0, 861.0], [5400.0, 778.0], [5800.0, 837.0], [5700.0, 881.0], [6100.0, 633.0], [6000.0, 725.0], [5900.0, 762.0], [6200.0, 599.0], [6300.0, 642.0], [6400.0, 598.0], [6500.0, 591.0], [6600.0, 609.0], [6700.0, 585.0], [6800.0, 724.0], [6900.0, 635.0], [7000.0, 659.0], [7100.0, 702.0], [7400.0, 883.0], [7200.0, 841.0], [7300.0, 828.0], [7600.0, 880.0], [7500.0, 878.0], [7700.0, 832.0], [7800.0, 800.0], [7900.0, 828.0], [8000.0, 775.0], [8100.0, 749.0], [8200.0, 765.0], [8300.0, 792.0], [8700.0, 710.0], [8400.0, 737.0], [8500.0, 706.0], [8600.0, 674.0], [8800.0, 701.0], [9200.0, 612.0], [9000.0, 653.0], [8900.0, 620.0], [9100.0, 612.0], [9300.0, 578.0], [9400.0, 583.0], [9600.0, 530.0], [9700.0, 560.0], [9500.0, 580.0], [9800.0, 504.0], [9900.0, 518.0], [10000.0, 455.0], [10100.0, 414.0], [10200.0, 389.0], [10300.0, 367.0], [10600.0, 266.0], [10500.0, 275.0], [10700.0, 252.0], [10400.0, 317.0], [10800.0, 238.0], [11200.0, 217.0], [10900.0, 214.0], [11000.0, 217.0], [11100.0, 202.0], [11500.0, 186.0], [11300.0, 189.0], [11400.0, 176.0], [11700.0, 191.0], [11600.0, 180.0], [11900.0, 219.0], [11800.0, 183.0], [12000.0, 201.0], [12200.0, 179.0], [12100.0, 204.0], [12300.0, 171.0], [12400.0, 156.0], [12600.0, 129.0], [12500.0, 157.0], [12700.0, 137.0], [12900.0, 134.0], [13200.0, 118.0], [12800.0, 136.0], [13100.0, 134.0], [13300.0, 117.0], [13000.0, 121.0], [13500.0, 87.0], [13400.0, 125.0], [13700.0, 110.0], [13600.0, 111.0], [13800.0, 100.0], [14000.0, 75.0], [14200.0, 87.0], [14100.0, 73.0], [13900.0, 102.0], [14300.0, 85.0], [14600.0, 84.0], [14700.0, 60.0], [14500.0, 89.0], [14400.0, 86.0], [14800.0, 72.0], [14900.0, 59.0], [15100.0, 47.0], [15000.0, 56.0], [15200.0, 49.0], [15300.0, 62.0], [15400.0, 31.0], [15800.0, 30.0], [15500.0, 32.0], [15700.0, 34.0], [15600.0, 39.0], [15900.0, 46.0], [16100.0, 26.0], [16200.0, 24.0], [16000.0, 28.0], [16300.0, 19.0], [16600.0, 13.0], [16400.0, 19.0], [16800.0, 14.0], [17400.0, 19.0], [17000.0, 12.0], [17200.0, 21.0], [17800.0, 34.0], [18000.0, 13.0], [17600.0, 15.0], [18400.0, 13.0], [18200.0, 13.0], [18800.0, 7.0], [19000.0, 11.0], [18600.0, 12.0], [19400.0, 3.0], [19200.0, 8.0], [20000.0, 10.0], [19600.0, 12.0], [20400.0, 5.0], [20200.0, 6.0], [19800.0, 8.0], [20600.0, 3.0], [20800.0, 1.0], [21000.0, 4.0], [21400.0, 3.0], [21800.0, 5.0], [22400.0, 5.0], [21600.0, 6.0], [23200.0, 2.0], [23000.0, 3.0], [23400.0, 1.0], [23800.0, 1.0], [24800.0, 1.0], [26400.0, 1.0], [26000.0, 2.0], [28600.0, 1.0], [16900.0, 19.0], [16500.0, 18.0], [16700.0, 23.0], [17100.0, 13.0], [17300.0, 15.0], [17500.0, 25.0], [18300.0, 8.0], [18100.0, 13.0], [17900.0, 20.0], [17700.0, 20.0], [18500.0, 4.0], [19100.0, 7.0], [18900.0, 6.0], [18700.0, 4.0], [19300.0, 8.0], [19900.0, 7.0], [19700.0, 8.0], [19500.0, 6.0], [20300.0, 2.0], [20100.0, 3.0], [20500.0, 6.0], [21100.0, 5.0], [21500.0, 4.0], [21300.0, 2.0], [20900.0, 3.0], [20700.0, 1.0], [22500.0, 1.0], [22100.0, 1.0], [22300.0, 3.0], [21700.0, 3.0], [22700.0, 2.0], [23300.0, 1.0], [23100.0, 2.0], [22900.0, 1.0], [23500.0, 1.0], [24500.0, 3.0], [24100.0, 2.0], [23900.0, 1.0], [24300.0, 1.0], [25100.0, 1.0], [24900.0, 1.0], [25900.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [27700.0, 1.0], [29100.0, 1.0], [28700.0, 1.0]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[0.0, 24492.0], [100.0, 7606.0], [200.0, 3671.0], [300.0, 2126.0], [400.0, 1466.0], [500.0, 931.0], [600.0, 644.0], [700.0, 542.0], [800.0, 627.0], [900.0, 593.0], [1000.0, 670.0], [1100.0, 623.0], [1200.0, 517.0], [1300.0, 487.0], [1400.0, 419.0], [1500.0, 395.0], [1600.0, 405.0], [1700.0, 506.0], [1800.0, 549.0], [1900.0, 518.0], [2000.0, 576.0], [2100.0, 613.0], [2300.0, 655.0], [2200.0, 604.0], [2400.0, 567.0], [2500.0, 545.0], [2600.0, 449.0], [2800.0, 412.0], [2700.0, 356.0], [2900.0, 361.0], [3000.0, 296.0], [3100.0, 292.0], [3200.0, 274.0], [3300.0, 299.0], [3400.0, 352.0], [3500.0, 284.0], [3600.0, 298.0], [3700.0, 231.0], [3800.0, 256.0], [3900.0, 243.0], [4000.0, 281.0], [4300.0, 330.0], [4200.0, 309.0], [4100.0, 277.0], [4500.0, 406.0], [4600.0, 450.0], [4400.0, 357.0], [4700.0, 503.0], [4800.0, 554.0], [4900.0, 638.0], [5100.0, 817.0], [5000.0, 771.0], [5300.0, 1001.0], [5200.0, 887.0], [5600.0, 858.0], [5500.0, 873.0], [5400.0, 915.0], [5700.0, 853.0], [5800.0, 768.0], [6000.0, 631.0], [5900.0, 741.0], [6100.0, 530.0], [6300.0, 520.0], [6200.0, 534.0], [6400.0, 558.0], [6500.0, 611.0], [6600.0, 578.0], [6700.0, 624.0], [6800.0, 650.0], [6900.0, 751.0], [7000.0, 823.0], [7100.0, 800.0], [7400.0, 1043.0], [7300.0, 910.0], [7200.0, 881.0], [7500.0, 903.0], [7600.0, 917.0], [7700.0, 915.0], [7800.0, 830.0], [7900.0, 868.0], [8000.0, 902.0], [8100.0, 803.0], [8500.0, 722.0], [8600.0, 680.0], [8700.0, 678.0], [8400.0, 764.0], [8200.0, 816.0], [8300.0, 743.0], [8800.0, 624.0], [8900.0, 610.0], [9100.0, 683.0], [9000.0, 694.0], [9200.0, 626.0], [9400.0, 636.0], [9500.0, 570.0], [9700.0, 551.0], [9600.0, 538.0], [9300.0, 628.0], [10000.0, 404.0], [10100.0, 315.0], [9800.0, 478.0], [9900.0, 403.0], [10200.0, 322.0], [10300.0, 326.0], [10700.0, 237.0], [10500.0, 254.0], [10400.0, 277.0], [10600.0, 227.0], [11100.0, 209.0], [10900.0, 205.0], [11000.0, 200.0], [11200.0, 221.0], [10800.0, 224.0], [11600.0, 221.0], [11500.0, 230.0], [11700.0, 224.0], [11400.0, 203.0], [11300.0, 203.0], [11900.0, 235.0], [12000.0, 219.0], [12100.0, 196.0], [11800.0, 224.0], [12200.0, 166.0], [12500.0, 156.0], [12300.0, 128.0], [12600.0, 161.0], [12700.0, 132.0], [12400.0, 118.0], [12900.0, 130.0], [12800.0, 153.0], [13100.0, 115.0], [13000.0, 113.0], [13300.0, 105.0], [13200.0, 130.0], [13400.0, 117.0], [13500.0, 111.0], [13700.0, 85.0], [13800.0, 72.0], [13600.0, 136.0], [14000.0, 92.0], [14100.0, 103.0], [14200.0, 108.0], [14300.0, 74.0], [13900.0, 67.0], [14600.0, 64.0], [14500.0, 69.0], [14400.0, 77.0], [14700.0, 58.0], [14800.0, 52.0], [14900.0, 57.0], [15100.0, 57.0], [15000.0, 49.0], [15300.0, 47.0], [15200.0, 36.0], [15400.0, 37.0], [15600.0, 21.0], [15500.0, 30.0], [15700.0, 27.0], [15800.0, 31.0], [16200.0, 23.0], [16000.0, 26.0], [16100.0, 21.0], [15900.0, 18.0], [16300.0, 15.0], [17000.0, 35.0], [17200.0, 21.0], [16800.0, 14.0], [17400.0, 20.0], [16600.0, 17.0], [16400.0, 14.0], [17800.0, 17.0], [18400.0, 9.0], [18200.0, 12.0], [18000.0, 16.0], [17600.0, 19.0], [18600.0, 8.0], [19400.0, 2.0], [18800.0, 8.0], [19000.0, 7.0], [19200.0, 4.0], [20000.0, 5.0], [20200.0, 3.0], [19600.0, 2.0], [20400.0, 7.0], [19800.0, 2.0], [21000.0, 2.0], [20800.0, 3.0], [21400.0, 5.0], [21200.0, 3.0], [20600.0, 3.0], [22400.0, 1.0], [22000.0, 1.0], [21600.0, 1.0], [22800.0, 2.0], [23200.0, 2.0], [24400.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [26400.0, 1.0], [27600.0, 1.0], [32800.0, 1.0], [16700.0, 14.0], [16500.0, 15.0], [17100.0, 16.0], [16900.0, 21.0], [17300.0, 16.0], [18100.0, 8.0], [18300.0, 8.0], [17900.0, 9.0], [17700.0, 8.0], [17500.0, 16.0], [18900.0, 8.0], [19100.0, 15.0], [18500.0, 9.0], [19300.0, 7.0], [18700.0, 6.0], [20300.0, 3.0], [20100.0, 7.0], [19900.0, 5.0], [19500.0, 5.0], [19700.0, 3.0], [21100.0, 4.0], [20900.0, 3.0], [21300.0, 2.0], [21500.0, 4.0], [20700.0, 3.0], [21700.0, 4.0], [22100.0, 2.0], [21900.0, 5.0], [22900.0, 2.0], [22700.0, 1.0], [23500.0, 1.0], [23100.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [25300.0, 1.0], [25100.0, 1.0], [25900.0, 1.0], [27100.0, 1.0], [27300.0, 1.0], [28900.0, 1.0], [30900.0, 1.0]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18300.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 118978.0, "series": [{"data": [[0.0, 72949.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18300.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 118978.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 300.0, "minX": 1.5945849E12, "maxY": 300.0, "series": [{"data": [[1.59458556E12, 300.0], [1.59458526E12, 300.0], [1.59458616E12, 300.0], [1.59458586E12, 300.0], [1.59458544E12, 300.0], [1.59458514E12, 300.0], [1.59458604E12, 300.0], [1.59458634E12, 300.0], [1.59458574E12, 300.0], [1.59458532E12, 300.0], [1.59458502E12, 300.0], [1.59458592E12, 300.0], [1.59458562E12, 300.0], [1.59458622E12, 300.0], [1.5945852E12, 300.0], [1.5945849E12, 300.0], [1.5945858E12, 300.0], [1.5945855E12, 300.0], [1.5945861E12, 300.0], [1.59458508E12, 300.0], [1.59458568E12, 300.0], [1.59458538E12, 300.0], [1.59458628E12, 300.0], [1.59458598E12, 300.0], [1.59458496E12, 300.0]], "isOverall": false, "label": "Thread Group GET product", "isController": false}, {"data": [[1.59458556E12, 300.0], [1.59458526E12, 300.0], [1.59458616E12, 300.0], [1.59458586E12, 300.0], [1.59458544E12, 300.0], [1.59458514E12, 300.0], [1.59458604E12, 300.0], [1.59458634E12, 300.0], [1.59458574E12, 300.0], [1.59458532E12, 300.0], [1.59458502E12, 300.0], [1.59458592E12, 300.0], [1.59458562E12, 300.0], [1.59458622E12, 300.0], [1.5945852E12, 300.0], [1.5945849E12, 300.0], [1.5945858E12, 300.0], [1.5945855E12, 300.0], [1.5945861E12, 300.0], [1.59458508E12, 300.0], [1.59458568E12, 300.0], [1.59458538E12, 300.0], [1.59458628E12, 300.0], [1.59458598E12, 300.0], [1.59458496E12, 300.0]], "isOverall": false, "label": "Thread Group GET product list", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458634E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4162.831171904576, "minX": 579.0, "maxY": 10185.0, "series": [{"data": [[579.0, 9646.909090909092], [583.0, 9344.0], [584.0, 9848.0], [586.0, 9831.0], [587.0, 9656.6], [589.0, 9977.545454545454], [590.0, 10056.0], [592.0, 10116.0], [595.0, 9880.5], [598.0, 10185.0], [600.0, 4212.259335424897]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[599.9948846414921, 4214.348418063383]], "isOverall": false, "label": "HTTP Request GET product list-Aggregated", "isController": false}, {"data": [[600.0, 4162.831171904576]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}, {"data": [[600.0, 4162.831171904576]], "isOverall": false, "label": "HTTP Request GET random product by id-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3468.0, "minX": 1.5945849E12, "maxY": 5168660.4, "series": [{"data": [[1.59458556E12, 4270363.433333334], [1.59458526E12, 4468181.383333334], [1.59458616E12, 4916719.483333333], [1.59458586E12, 5092346.133333334], [1.59458544E12, 4374843.2], [1.59458514E12, 4301026.55], [1.59458604E12, 5102647.166666667], [1.59458634E12, 4611110.233333333], [1.59458574E12, 4612429.2], [1.59458532E12, 4224980.316666666], [1.59458502E12, 3021158.15], [1.59458592E12, 5000374.316666666], [1.59458562E12, 4512882.566666666], [1.59458622E12, 4862888.616666666], [1.5945852E12, 4349992.1], [1.5945849E12, 904754.7166666667], [1.5945858E12, 4830558.6], [1.5945855E12, 4393483.066666666], [1.5945861E12, 5157979.5], [1.59458508E12, 3902378.75], [1.59458568E12, 4473812.766666667], [1.59458538E12, 4144657.5166666666], [1.59458628E12, 5168660.4], [1.59458598E12, 5060954.233333333], [1.59458496E12, 2302385.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59458556E12, 16685.183333333334], [1.59458526E12, 17709.033333333333], [1.59458616E12, 20585.266666666666], [1.59458586E12, 20274.166666666668], [1.59458544E12, 18175.316666666666], [1.59458514E12, 17146.883333333335], [1.59458604E12, 20298.916666666668], [1.59458634E12, 18453.883333333335], [1.59458574E12, 18600.733333333334], [1.59458532E12, 16541.566666666666], [1.59458502E12, 11646.2], [1.59458592E12, 19896.516666666666], [1.59458562E12, 18025.35], [1.59458622E12, 19811.666666666668], [1.5945852E12, 17542.633333333335], [1.5945849E12, 3468.0], [1.5945858E12, 19532.816666666666], [1.5945855E12, 17766.566666666666], [1.5945861E12, 21306.066666666666], [1.59458508E12, 15130.95], [1.59458568E12, 17963.216666666667], [1.59458538E12, 16857.416666666668], [1.59458628E12, 21007.716666666667], [1.59458598E12, 20456.65], [1.59458496E12, 9431.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458634E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3392.5934561865415, "minX": 1.5945849E12, "maxY": 11412.860730593606, "series": [{"data": [[1.59458556E12, 4350.199564586353], [1.59458526E12, 4189.722774566469], [1.59458616E12, 3823.6596594492285], [1.59458586E12, 3700.142219517143], [1.59458544E12, 4195.7188755019815], [1.59458514E12, 4376.691088157574], [1.59458604E12, 3680.4956468920914], [1.59458634E12, 3669.933228769886], [1.59458574E12, 4021.3709677419365], [1.59458532E12, 4298.44938875305], [1.59458502E12, 6018.519999999994], [1.59458592E12, 3668.944421487597], [1.59458562E12, 4156.181547619057], [1.59458622E12, 3751.1553336166717], [1.5945852E12, 4226.664608076013], [1.5945849E12, 11412.860730593606], [1.5945858E12, 3826.222887700529], [1.5945855E12, 4166.493885230462], [1.5945861E12, 3595.7441394510047], [1.59458508E12, 4925.989677077835], [1.59458568E12, 4188.240646651264], [1.59458538E12, 4698.109947643977], [1.59458628E12, 3614.5489804078356], [1.59458598E12, 3697.3238056349574], [1.59458496E12, 8022.974865350092]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458556E12, 4535.396350734929], [1.59458526E12, 4266.43116027301], [1.59458616E12, 3484.2793693520434], [1.59458586E12, 3759.1688497748596], [1.59458544E12, 3867.9370614035147], [1.59458514E12, 4403.796036732717], [1.59458604E12, 3699.177168576106], [1.59458634E12, 3645.6742729306507], [1.59458574E12, 3948.1002423441264], [1.59458532E12, 4463.033418367343], [1.59458502E12, 6509.167157584689], [1.59458592E12, 3699.720784641072], [1.59458562E12, 4196.938503900874], [1.59458622E12, 3640.9436706268007], [1.5945852E12, 4168.82667601028], [1.5945849E12, 11152.136815920387], [1.5945858E12, 3762.7407407407422], [1.5945855E12, 4093.883367839883], [1.5945861E12, 3392.5934561865415], [1.59458508E12, 5249.603661971839], [1.59458568E12, 4111.89209621993], [1.59458538E12, 4562.514588859418], [1.59458628E12, 3491.862149080351], [1.59458598E12, 3624.323605836498], [1.59458496E12, 7625.902397260283]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458634E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3381.925723956374, "minX": 1.5945849E12, "maxY": 11130.480593607295, "series": [{"data": [[1.59458556E12, 4223.434687953548], [1.59458526E12, 4068.817803468207], [1.59458616E12, 3677.21883540046], [1.59458586E12, 3588.3580848042193], [1.59458544E12, 4023.5535081502467], [1.59458514E12, 4251.673792937784], [1.59458604E12, 3569.463859080785], [1.59458634E12, 3551.1171857494996], [1.59458574E12, 3899.2273745519774], [1.59458532E12, 4176.372860635683], [1.59458502E12, 5910.875555555552], [1.59458592E12, 3555.4950413223173], [1.59458562E12, 4041.8855311355323], [1.59458622E12, 3627.2065448363765], [1.5945852E12, 4088.4505938242282], [1.5945849E12, 11130.480593607295], [1.5945858E12, 3702.2791443850315], [1.5945855E12, 4034.8012699905885], [1.5945861E12, 3448.816870366654], [1.59458508E12, 4831.297247220753], [1.59458568E12, 4056.629792147809], [1.59458538E12, 4529.991523310885], [1.59458628E12, 3497.457417033187], [1.59458598E12, 3587.2870559411995], [1.59458496E12, 7829.890035906645]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458556E12, 4523.184744044605], [1.59458526E12, 4253.586490939055], [1.59458616E12, 3473.270909440496], [1.59458586E12, 3748.3853868194838], [1.59458544E12, 3854.276754385957], [1.59458514E12, 4389.111164813923], [1.59458604E12, 3690.19926350245], [1.59458634E12, 3635.4923937360204], [1.59458574E12, 3938.003965631193], [1.59458532E12, 4451.8022959183545], [1.59458502E12, 6494.84536082474], [1.59458592E12, 3690.3823038397363], [1.59458562E12, 4186.219825608077], [1.59458622E12, 3631.8660385087983], [1.5945852E12, 4155.392665265127], [1.5945849E12, 11115.196517412931], [1.5945858E12, 3753.1611215735484], [1.5945855E12, 4082.120772946859], [1.5945861E12, 3381.925723956374], [1.59458508E12, 5239.003098591543], [1.59458568E12, 4101.508820160366], [1.59458538E12, 4549.664817940656], [1.59458628E12, 3482.248015488871], [1.59458598E12, 3614.3236058365], [1.59458496E12, 7602.110017123279]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458634E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.01719312275089963, "minX": 1.5945849E12, "maxY": 3.110730593607303, "series": [{"data": [[1.59458556E12, 0.037252056119980635], [1.59458526E12, 0.03421965317919078], [1.59458616E12, 0.022913601009039324], [1.59458586E12, 0.026171637248934898], [1.59458544E12, 0.033545948499881885], [1.59458514E12, 0.03867403314917123], [1.59458604E12, 0.025106296821218822], [1.59458634E12, 0.019045485099708725], [1.59458574E12, 0.02755376344086021], [1.59458532E12, 0.027383863080684533], [1.59458502E12, 0.07692307692307716], [1.59458592E12, 0.030991735537190035], [1.59458562E12, 0.03182234432234442], [1.59458622E12, 0.022524436889077768], [1.5945852E12, 0.034441805225653294], [1.5945849E12, 3.110730593607303], [1.5945858E12, 0.03165775401069531], [1.5945855E12, 0.03974600188146761], [1.5945861E12, 0.02183931075936688], [1.59458508E12, 0.04287983059820009], [1.59458568E12, 0.03210161662817557], [1.59458538E12, 0.042632759910246835], [1.59458628E12, 0.01719312275089963], [1.59458598E12, 0.024295630869742825], [1.59458496E12, 0.11669658886894078]], "isOverall": false, "label": "HTTP Request GET product list", "isController": false}, {"data": [[1.59458556E12, 0.03547896604156127], [1.59458526E12, 0.029183337255824976], [1.59458616E12, 0.018650259565468195], [1.59458586E12, 0.022922636103151806], [1.59458544E12, 0.02938596491228075], [1.59458514E12, 0.03165780570323823], [1.59458604E12, 0.02270867430441898], [1.59458634E12, 0.020134228187919437], [1.59458574E12, 0.02820004406256892], [1.59458532E12, 0.029081632653061282], [1.59458502E12, 0.054123711340206174], [1.59458592E12, 0.025876460767946533], [1.59458562E12, 0.027076640660853607], [1.59458622E12, 0.021302744776730848], [1.5945852E12, 0.030833917309039966], [1.5945849E12, 0.48880597014925375], [1.5945858E12, 0.023017367650135904], [1.5945855E12, 0.029215550954681428], [1.5945861E12, 0.017675817976683005], [1.59458508E12, 0.03943661971830987], [1.59458568E12, 0.02611683848797249], [1.59458538E12, 0.033518205931998814], [1.59458628E12, 0.020329138431752134], [1.59458598E12, 0.025184889066560037], [1.59458496E12, 0.09674657534246588]], "isOverall": false, "label": "HTTP Request GET random product by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458634E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5945849E12, "maxY": 32881.0, "series": [{"data": [[1.59458556E12, 22156.0], [1.59458526E12, 22411.0], [1.59458616E12, 17880.0], [1.59458586E12, 24157.0], [1.59458544E12, 21394.0], [1.59458514E12, 22382.0], [1.59458604E12, 24471.0], [1.59458634E12, 19572.0], [1.59458574E12, 23292.0], [1.59458532E12, 28782.0], [1.59458502E12, 27581.0], [1.59458592E12, 21581.0], [1.59458562E12, 24806.0], [1.59458622E12, 21621.0], [1.5945852E12, 21818.0], [1.5945849E12, 28978.0], [1.5945858E12, 32881.0], [1.5945855E12, 21495.0], [1.5945861E12, 18882.0], [1.59458508E12, 27683.0], [1.59458568E12, 23519.0], [1.59458538E12, 27785.0], [1.59458628E12, 22370.0], [1.59458598E12, 21208.0], [1.59458496E12, 30982.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59458556E12, 5.0], [1.59458526E12, 4.0], [1.59458616E12, 10.0], [1.59458586E12, 4.0], [1.59458544E12, 16.145997903347023], [1.59458514E12, 4.0], [1.59458604E12, 3.0], [1.59458634E12, 4.0], [1.59458574E12, 4.0], [1.59458532E12, 4.0], [1.59458502E12, 5.0], [1.59458592E12, 4.0], [1.59458562E12, 4.0], [1.59458622E12, 4.0], [1.5945852E12, 5.0], [1.5945849E12, 597.9629410851003], [1.5945858E12, 4.0], [1.5945855E12, 6.0], [1.5945861E12, 7.0], [1.59458508E12, 4.0], [1.59458568E12, 5.0], [1.59458538E12, 11.0], [1.59458628E12, 4.0], [1.59458598E12, 4.0], [1.59458496E12, 161.42499455809593]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59458556E12, 5.0], [1.59458526E12, 4.0], [1.59458616E12, 11.0], [1.59458586E12, 4.0], [1.59458544E12, 18.0], [1.59458514E12, 4.0], [1.59458604E12, 3.297200937271114], [1.59458634E12, 4.0], [1.59458574E12, 4.0], [1.59458532E12, 4.0], [1.59458502E12, 5.0], [1.59458592E12, 4.0], [1.59458562E12, 4.0], [1.59458622E12, 4.0], [1.5945852E12, 6.0], [1.5945849E12, 846.0353299784658], [1.5945858E12, 4.0], [1.5945855E12, 6.0], [1.5945861E12, 8.0], [1.59458508E12, 4.0], [1.59458568E12, 5.090400829315186], [1.59458538E12, 12.774100778102877], [1.59458628E12, 4.0], [1.59458598E12, 4.0], [1.59458496E12, 191.16100261211398]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59458556E12, 5.0], [1.59458526E12, 4.0], [1.59458616E12, 11.0], [1.59458586E12, 4.0], [1.59458544E12, 17.0], [1.59458514E12, 4.0], [1.59458604E12, 3.0], [1.59458634E12, 4.0], [1.59458574E12, 4.0], [1.59458532E12, 4.0], [1.59458502E12, 5.0], [1.59458592E12, 4.0], [1.59458562E12, 4.0], [1.59458622E12, 4.0], [1.5945852E12, 5.0], [1.5945849E12, 721.51647054255], [1.5945858E12, 4.0], [1.5945855E12, 6.0], [1.5945861E12, 7.0], [1.59458508E12, 4.0], [1.59458568E12, 5.0], [1.59458538E12, 12.0], [1.59458628E12, 4.0], [1.59458598E12, 4.0], [1.59458496E12, 185.3674994558096]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59458556E12, 2.0], [1.59458526E12, 2.0], [1.59458616E12, 2.0], [1.59458586E12, 2.0], [1.59458544E12, 2.0], [1.59458514E12, 2.0], [1.59458604E12, 1.0], [1.59458634E12, 1.0], [1.59458574E12, 2.0], [1.59458532E12, 2.0], [1.59458502E12, 3.0], [1.59458592E12, 1.0], [1.59458562E12, 2.0], [1.59458622E12, 2.0], [1.5945852E12, 2.0], [1.5945849E12, 27.0], [1.5945858E12, 1.0], [1.5945855E12, 2.0], [1.5945861E12, 1.0], [1.59458508E12, 2.0], [1.59458568E12, 2.0], [1.59458538E12, 2.0], [1.59458628E12, 1.0], [1.59458598E12, 1.0], [1.59458496E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59458556E12, 1307.0], [1.59458526E12, 1163.5], [1.59458616E12, 2928.0], [1.59458586E12, 1381.0], [1.59458544E12, 3378.0], [1.59458514E12, 2000.0], [1.59458604E12, 1111.0], [1.59458634E12, 1145.0], [1.59458574E12, 1164.0], [1.59458532E12, 1109.0], [1.59458502E12, 2576.0], [1.59458592E12, 1484.5], [1.59458562E12, 1165.0], [1.59458622E12, 2102.0], [1.5945852E12, 1295.0], [1.5945849E12, 11926.0], [1.5945858E12, 2233.5], [1.5945855E12, 2019.0], [1.5945861E12, 2799.0], [1.59458508E12, 781.5], [1.59458568E12, 1588.0], [1.59458538E12, 3976.5], [1.59458628E12, 1231.0], [1.59458598E12, 1315.0], [1.59458496E12, 7528.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458634E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 178.0, "minX": 16.0, "maxY": 15207.0, "series": [{"data": [[16.0, 9361.5], [17.0, 10312.0], [18.0, 11265.0], [24.0, 13732.0], [25.0, 15207.0], [28.0, 9523.5], [29.0, 12461.0], [34.0, 8689.0], [37.0, 13187.5], [36.0, 13376.5], [39.0, 5743.0], [40.0, 9807.5], [41.0, 3747.5], [42.0, 9838.0], [44.0, 13100.5], [45.0, 9474.5], [47.0, 13509.0], [49.0, 5498.5], [51.0, 178.0], [53.0, 8009.0], [52.0, 4901.0], [55.0, 5668.0], [54.0, 9458.5], [57.0, 5005.0], [59.0, 6082.0], [58.0, 6456.5], [61.0, 11984.0], [60.0, 1618.0], [62.0, 12320.5], [63.0, 1347.5], [64.0, 7249.0], [67.0, 4542.0], [65.0, 2530.0], [68.0, 8519.0], [69.0, 9166.5], [71.0, 7906.5], [70.0, 4359.0], [75.0, 11061.0], [74.0, 6498.5], [73.0, 6633.5], [72.0, 8458.0], [79.0, 10041.5], [76.0, 6750.5], [78.0, 6350.5], [77.0, 4768.0], [83.0, 6030.0], [81.0, 6681.0], [80.0, 6027.0], [82.0, 767.5], [86.0, 5082.5], [84.0, 1536.0], [87.0, 3999.0], [85.0, 2404.5], [89.0, 6586.0], [90.0, 6379.0], [88.0, 4062.5], [91.0, 5499.0], [93.0, 5903.0], [95.0, 5101.5], [94.0, 3412.5], [92.0, 2546.0], [97.0, 4149.5], [96.0, 4923.0], [99.0, 827.0], [98.0, 2844.0], [103.0, 4143.0], [100.0, 4791.0], [101.0, 3094.5], [102.0, 1176.5], [105.0, 3311.0], [104.0, 4407.0], [107.0, 1006.0], [106.0, 4380.5], [109.0, 4907.0], [108.0, 4350.0], [111.0, 3306.0], [110.0, 3648.5], [114.0, 4020.0], [112.0, 3345.5], [113.0, 933.0], [115.0, 1669.0], [118.0, 5021.5], [117.0, 3133.0], [116.0, 2819.5], [119.0, 1147.5], [120.0, 2287.0], [123.0, 2784.0], [121.0, 2205.5], [122.0, 2388.0], [126.0, 1988.5], [125.0, 2231.0], [124.0, 2152.5], [127.0, 3527.0], [130.0, 2006.0], [129.0, 4521.5], [133.0, 3417.0], [134.0, 2805.5], [131.0, 3093.0], [135.0, 2183.5], [132.0, 3636.0], [128.0, 2463.0], [136.0, 2792.5], [140.0, 4889.0], [142.0, 2333.5], [143.0, 2865.0], [137.0, 1268.0], [138.0, 1680.0], [141.0, 3500.5], [139.0, 2798.0], [145.0, 3020.0], [149.0, 2586.0], [148.0, 2590.0], [150.0, 3009.5], [151.0, 2500.0], [144.0, 2368.0], [146.0, 1917.0], [147.0, 2603.5], [155.0, 2485.0], [156.0, 1884.5], [152.0, 2564.5], [154.0, 1623.5], [158.0, 715.0], [153.0, 3186.0], [157.0, 3885.5], [159.0, 2512.0], [167.0, 2819.0], [160.0, 1918.0], [165.0, 2475.0], [163.0, 2806.0], [162.0, 2495.0], [164.0, 3628.0], [161.0, 2435.5], [166.0, 2989.5], [168.0, 2688.5], [173.0, 2154.0], [170.0, 1886.0], [174.0, 2087.0], [171.0, 1873.0], [169.0, 1950.0], [175.0, 2872.0], [172.0, 2421.0], [178.0, 2586.5], [181.0, 1855.0], [176.0, 3415.0], [182.0, 2310.5], [179.0, 2261.5], [177.0, 2374.5], [183.0, 2549.0], [180.0, 2728.0], [185.0, 2331.5], [184.0, 3308.5], [191.0, 2200.0], [186.0, 2203.0], [188.0, 2122.0], [187.0, 1950.5], [190.0, 802.0], [189.0, 680.5], [195.0, 2832.0], [192.0, 3158.0], [196.0, 3456.5], [193.0, 3793.0], [199.0, 2624.5], [194.0, 2136.5], [197.0, 1288.0], [198.0, 2803.0], [207.0, 2373.0], [201.0, 2713.0], [200.0, 3593.5], [205.0, 704.0], [202.0, 3234.5], [206.0, 547.5], [204.0, 1970.5], [203.0, 596.5], [212.0, 2279.5], [211.0, 2481.0], [208.0, 2208.0], [209.0, 1169.5], [210.0, 1763.0], [215.0, 2497.0], [213.0, 2535.5], [214.0, 2591.0], [222.0, 5047.5], [217.0, 658.5], [223.0, 2109.5], [218.0, 4106.5], [220.0, 1908.5], [221.0, 668.0], [219.0, 2635.0], [216.0, 1799.0], [227.0, 2167.0], [230.0, 318.5], [228.0, 603.5], [224.0, 1593.0], [234.0, 4860.5], [236.0, 2477.5], [241.0, 832.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 241.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 121.0, "minX": 16.0, "maxY": 15069.0, "series": [{"data": [[16.0, 9244.0], [17.0, 10158.5], [18.0, 11062.5], [24.0, 13610.0], [25.0, 15069.0], [28.0, 8428.0], [29.0, 12195.0], [34.0, 8601.0], [37.0, 12934.0], [36.0, 13211.5], [39.0, 5459.0], [40.0, 8436.5], [41.0, 3670.5], [42.0, 9671.5], [44.0, 13091.0], [45.0, 9413.5], [47.0, 13473.0], [49.0, 5486.0], [51.0, 121.0], [53.0, 8005.0], [52.0, 4814.5], [55.0, 5573.0], [54.0, 9166.0], [57.0, 4607.0], [59.0, 5608.5], [58.0, 6081.5], [61.0, 11848.0], [60.0, 1532.0], [62.0, 12094.0], [63.0, 1207.5], [64.0, 7103.0], [67.0, 4476.0], [65.0, 2529.0], [68.0, 8380.5], [69.0, 9142.0], [71.0, 7885.0], [70.0, 4052.0], [75.0, 11013.0], [74.0, 6408.0], [73.0, 6480.0], [72.0, 8443.5], [79.0, 9946.0], [76.0, 6669.5], [78.0, 6246.0], [77.0, 4693.0], [83.0, 5984.5], [81.0, 6591.0], [80.0, 5854.5], [82.0, 695.5], [86.0, 4902.5], [84.0, 946.5], [87.0, 3977.5], [85.0, 2341.5], [89.0, 6511.0], [90.0, 6245.5], [88.0, 3980.5], [91.0, 5417.0], [93.0, 5717.5], [95.0, 5018.0], [94.0, 3196.5], [92.0, 2510.5], [97.0, 4039.5], [96.0, 4920.0], [99.0, 645.0], [98.0, 2701.5], [103.0, 4121.0], [100.0, 4583.5], [101.0, 3085.0], [102.0, 1116.0], [105.0, 3277.0], [104.0, 4219.0], [107.0, 963.0], [106.0, 4331.5], [109.0, 4787.0], [108.0, 4306.5], [111.0, 3199.0], [110.0, 3606.0], [114.0, 3873.5], [112.0, 3202.0], [113.0, 923.5], [115.0, 1549.0], [118.0, 4990.5], [117.0, 3018.0], [116.0, 2623.0], [119.0, 1009.0], [120.0, 2077.5], [123.0, 2595.0], [121.0, 2130.5], [122.0, 2293.5], [126.0, 1893.5], [125.0, 2191.0], [124.0, 2039.0], [127.0, 3301.0], [130.0, 1903.5], [129.0, 4489.5], [133.0, 3301.0], [134.0, 2701.0], [131.0, 3016.0], [135.0, 1958.5], [132.0, 3609.5], [128.0, 2366.0], [136.0, 2711.0], [140.0, 4757.5], [142.0, 2280.0], [143.0, 2808.0], [137.0, 1193.0], [138.0, 1410.5], [141.0, 3409.0], [139.0, 2621.5], [145.0, 2985.0], [149.0, 2523.0], [148.0, 2475.0], [150.0, 2936.0], [151.0, 2434.0], [144.0, 2310.0], [146.0, 1880.0], [147.0, 2558.0], [155.0, 2364.0], [156.0, 1691.5], [152.0, 2524.5], [154.0, 1612.0], [158.0, 592.5], [153.0, 3007.0], [157.0, 3833.0], [159.0, 2465.0], [167.0, 2778.0], [160.0, 1762.5], [165.0, 2402.0], [163.0, 2762.0], [162.0, 2405.5], [164.0, 3573.5], [161.0, 2404.5], [166.0, 2906.0], [168.0, 2590.5], [173.0, 2083.0], [170.0, 1825.5], [174.0, 2085.0], [171.0, 1472.0], [169.0, 1804.0], [175.0, 2834.0], [172.0, 2392.5], [178.0, 2495.0], [181.0, 1815.0], [176.0, 3363.0], [182.0, 2290.5], [179.0, 2226.0], [177.0, 2253.5], [183.0, 2338.0], [180.0, 2596.0], [185.0, 2284.5], [184.0, 3205.0], [191.0, 2196.0], [186.0, 2074.0], [188.0, 2103.5], [187.0, 1813.0], [190.0, 689.5], [189.0, 594.0], [195.0, 2778.0], [192.0, 3094.5], [196.0, 3361.0], [193.0, 3555.0], [199.0, 2517.5], [194.0, 2101.5], [197.0, 1269.0], [198.0, 2567.5], [207.0, 2299.0], [201.0, 2604.0], [200.0, 3587.5], [205.0, 619.0], [202.0, 3025.5], [206.0, 431.5], [204.0, 1895.5], [203.0, 471.0], [212.0, 2279.5], [211.0, 2444.0], [208.0, 2094.5], [209.0, 1039.5], [210.0, 1593.0], [215.0, 2473.5], [213.0, 2453.5], [214.0, 2490.0], [222.0, 4958.0], [217.0, 550.5], [223.0, 2031.0], [218.0, 4094.0], [220.0, 1904.0], [221.0, 476.5], [219.0, 2604.0], [216.0, 1798.5], [227.0, 2165.0], [230.0, 292.5], [228.0, 512.5], [224.0, 1592.5], [234.0, 4677.5], [236.0, 2394.0], [241.0, 519.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 241.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.5945849E12, "maxY": 171.81666666666666, "series": [{"data": [[1.59458556E12, 134.66666666666666], [1.59458526E12, 142.9], [1.59458616E12, 165.96666666666667], [1.59458586E12, 163.58333333333334], [1.59458544E12, 146.55], [1.59458514E12, 138.35], [1.59458604E12, 163.78333333333333], [1.59458634E12, 138.88333333333333], [1.59458574E12, 150.05], [1.59458532E12, 133.5], [1.59458502E12, 94.03333333333333], [1.59458592E12, 160.53333333333333], [1.59458562E12, 145.43333333333334], [1.59458622E12, 159.8], [1.5945852E12, 141.51666666666668], [1.5945849E12, 38.0], [1.5945858E12, 157.56666666666666], [1.5945855E12, 143.31666666666666], [1.5945861E12, 171.81666666666666], [1.59458508E12, 122.13333333333334], [1.59458568E12, 144.91666666666666], [1.59458538E12, 135.96666666666667], [1.59458628E12, 169.45], [1.59458598E12, 165.01666666666668], [1.59458496E12, 76.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458634E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.5945849E12, "maxY": 171.81666666666666, "series": [{"data": [[1.59458556E12, 134.66666666666666], [1.59458526E12, 142.9], [1.59458616E12, 165.96666666666667], [1.59458586E12, 163.58333333333334], [1.59458544E12, 146.55], [1.59458514E12, 138.35], [1.59458604E12, 163.78333333333333], [1.59458634E12, 148.88333333333333], [1.59458574E12, 150.05], [1.59458532E12, 133.5], [1.59458502E12, 94.01666666666667], [1.59458592E12, 160.53333333333333], [1.59458562E12, 145.43333333333334], [1.59458622E12, 159.8], [1.5945852E12, 141.51666666666668], [1.5945849E12, 28.0], [1.5945858E12, 157.56666666666666], [1.5945855E12, 143.31666666666666], [1.5945861E12, 171.81666666666666], [1.59458508E12, 122.13333333333334], [1.59458568E12, 144.91666666666666], [1.59458538E12, 135.96666666666667], [1.59458628E12, 169.45], [1.59458598E12, 165.01666666666668], [1.59458496E12, 76.06666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59458634E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.4, "minX": 1.5945849E12, "maxY": 88.63333333333334, "series": [{"data": [[1.59458556E12, 65.76666666666667], [1.59458526E12, 70.81666666666666], [1.59458616E12, 86.68333333333334], [1.59458586E12, 81.43333333333334], [1.59458544E12, 76.0], [1.59458514E12, 68.96666666666667], [1.59458604E12, 81.46666666666667], [1.59458634E12, 74.5], [1.59458574E12, 75.65], [1.59458532E12, 65.33333333333333], [1.59458502E12, 45.266666666666666], [1.59458592E12, 79.86666666666666], [1.59458562E12, 72.63333333333334], [1.59458622E12, 81.36666666666666], [1.5945852E12, 71.35], [1.5945849E12, 13.4], [1.5945858E12, 79.65], [1.5945855E12, 72.45], [1.5945861E12, 88.63333333333334], [1.59458508E12, 59.166666666666664], [1.59458568E12, 72.75], [1.59458538E12, 69.11666666666666], [1.59458628E12, 86.08333333333333], [1.59458598E12, 83.38333333333334], [1.59458496E12, 38.93333333333333]], "isOverall": false, "label": "HTTP Request GET random product by id-success", "isController": false}, {"data": [[1.59458556E12, 68.9], [1.59458526E12, 72.08333333333333], [1.59458616E12, 79.28333333333333], [1.59458586E12, 82.15], [1.59458544E12, 70.55], [1.59458514E12, 69.38333333333334], [1.59458604E12, 82.31666666666666], [1.59458634E12, 74.38333333333334], [1.59458574E12, 74.4], [1.59458532E12, 68.16666666666667], [1.59458502E12, 48.75], [1.59458592E12, 80.66666666666667], [1.59458562E12, 72.8], [1.59458622E12, 78.43333333333334], [1.5945852E12, 70.16666666666667], [1.5945849E12, 14.6], [1.5945858E12, 77.91666666666667], [1.5945855E12, 70.86666666666666], [1.5945861E12, 83.18333333333334], [1.59458508E12, 62.96666666666667], [1.59458568E12, 72.16666666666667], [1.59458538E12, 66.85], [1.59458628E12, 83.36666666666666], [1.59458598E12, 81.63333333333334], [1.59458496E12, 37.13333333333333]], "isOverall": false, "label": "HTTP Request GET product list-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458634E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.5945849E12, "maxY": 171.81666666666666, "series": [{"data": [[1.59458556E12, 134.66666666666666], [1.59458526E12, 142.9], [1.59458616E12, 165.96666666666667], [1.59458586E12, 163.58333333333334], [1.59458544E12, 146.55], [1.59458514E12, 138.35], [1.59458604E12, 163.78333333333333], [1.59458634E12, 148.88333333333333], [1.59458574E12, 150.05], [1.59458532E12, 133.5], [1.59458502E12, 94.01666666666667], [1.59458592E12, 160.53333333333333], [1.59458562E12, 145.43333333333334], [1.59458622E12, 159.8], [1.5945852E12, 141.51666666666668], [1.5945849E12, 28.0], [1.5945858E12, 157.56666666666666], [1.5945855E12, 143.31666666666666], [1.5945861E12, 171.81666666666666], [1.59458508E12, 122.13333333333334], [1.59458568E12, 144.91666666666666], [1.59458538E12, 135.96666666666667], [1.59458628E12, 169.45], [1.59458598E12, 165.01666666666668], [1.59458496E12, 76.06666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59458634E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

